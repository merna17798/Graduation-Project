
uuuart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080054f8  080054f8  000154f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005670  08005670  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08005670  08005670  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005670  08005670  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005670  08005670  00015670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08005678  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000007c  080056f4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  080056f4  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc7b  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c59  00000000  00000000  0002bd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0002d980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000950  00000000  00000000  0002e390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018175  00000000  00000000  0002ece0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008f2d  00000000  00000000  00046e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000856e2  00000000  00000000  0004fd82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5464  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d24  00000000  00000000  000d54e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080054e0 	.word	0x080054e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080054e0 	.word	0x080054e0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_f2uiz>:
 800098c:	0042      	lsls	r2, r0, #1
 800098e:	d20e      	bcs.n	80009ae <__aeabi_f2uiz+0x22>
 8000990:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000994:	d30b      	bcc.n	80009ae <__aeabi_f2uiz+0x22>
 8000996:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800099a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099e:	d409      	bmi.n	80009b4 <__aeabi_f2uiz+0x28>
 80009a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009a8:	fa23 f002 	lsr.w	r0, r3, r2
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr
 80009b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80009b8:	d101      	bne.n	80009be <__aeabi_f2uiz+0x32>
 80009ba:	0242      	lsls	r2, r0, #9
 80009bc:	d102      	bne.n	80009c4 <__aeabi_f2uiz+0x38>
 80009be:	f04f 30ff 	mov.w	r0, #4294967295
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d2:	f001 fa1b 	bl	8001e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d6:	f000 fbd1 	bl	800117c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009da:	f000 fcc5 	bl	8001368 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009de:	f000 fc6f 	bl	80012c0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80009e2:	f000 fc11 	bl	8001208 <MX_I2C1_Init>
  MX_I2C2_Init();
 80009e6:	f000 fc3d 	bl	8001264 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 80009ea:	f000 fc93 	bl	8001314 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_TOMIN, MLX90614_DBG_ON);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2120      	movs	r1, #32
 80009f2:	205a      	movs	r0, #90	; 0x5a
 80009f4:	f000 ffb8 	bl	8001968 <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_TOMAX, MLX90614_DBG_ON);
 80009f8:	2201      	movs	r2, #1
 80009fa:	2121      	movs	r1, #33	; 0x21
 80009fc:	205a      	movs	r0, #90	; 0x5a
 80009fe:	f000 ffb3 	bl	8001968 <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_PWMCTRL, MLX90614_DBG_ON);
 8000a02:	2201      	movs	r2, #1
 8000a04:	2122      	movs	r1, #34	; 0x22
 8000a06:	205a      	movs	r0, #90	; 0x5a
 8000a08:	f000 ffae 	bl	8001968 <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_TARANGE, MLX90614_DBG_ON);
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	2123      	movs	r1, #35	; 0x23
 8000a10:	205a      	movs	r0, #90	; 0x5a
 8000a12:	f000 ffa9 	bl	8001968 <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_EMISSIVITY, MLX90614_DBG_ON);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2124      	movs	r1, #36	; 0x24
 8000a1a:	205a      	movs	r0, #90	; 0x5a
 8000a1c:	f000 ffa4 	bl	8001968 <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_CFG1, MLX90614_DBG_ON);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2125      	movs	r1, #37	; 0x25
 8000a24:	205a      	movs	r0, #90	; 0x5a
 8000a26:	f000 ff9f 	bl	8001968 <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_SA, MLX90614_DBG_ON);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	212e      	movs	r1, #46	; 0x2e
 8000a2e:	205a      	movs	r0, #90	; 0x5a
 8000a30:	f000 ff9a 	bl	8001968 <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_ID1, MLX90614_DBG_ON);
 8000a34:	2201      	movs	r2, #1
 8000a36:	213c      	movs	r1, #60	; 0x3c
 8000a38:	205a      	movs	r0, #90	; 0x5a
 8000a3a:	f000 ff95 	bl	8001968 <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_ID2, MLX90614_DBG_ON);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	213d      	movs	r1, #61	; 0x3d
 8000a42:	205a      	movs	r0, #90	; 0x5a
 8000a44:	f000 ff90 	bl	8001968 <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_ID3, MLX90614_DBG_ON);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	213e      	movs	r1, #62	; 0x3e
 8000a4c:	205a      	movs	r0, #90	; 0x5a
 8000a4e:	f000 ff8b 	bl	8001968 <MLX90614_ReadReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_ID4, MLX90614_DBG_ON);
 8000a52:	2201      	movs	r2, #1
 8000a54:	213f      	movs	r1, #63	; 0x3f
 8000a56:	205a      	movs	r0, #90	; 0x5a
 8000a58:	f000 ff86 	bl	8001968 <MLX90614_ReadReg>
  MLX90614_WriteReg(MLX90614_DEFAULT_SA, MLX90614_CFG1, 0xB7C0);
 8000a5c:	f24b 72c0 	movw	r2, #47040	; 0xb7c0
 8000a60:	2125      	movs	r1, #37	; 0x25
 8000a62:	205a      	movs	r0, #90	; 0x5a
 8000a64:	f000 ff22 	bl	80018ac <MLX90614_WriteReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_CFG1, MLX90614_DBG_ON);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2125      	movs	r1, #37	; 0x25
 8000a6c:	205a      	movs	r0, #90	; 0x5a
 8000a6e:	f000 ff7b 	bl	8001968 <MLX90614_ReadReg>
  MLX90614_WriteReg(MLX90614_DEFAULT_SA, MLX90614_PWMCTRL, 0x1405);
 8000a72:	f241 4205 	movw	r2, #5125	; 0x1405
 8000a76:	2122      	movs	r1, #34	; 0x22
 8000a78:	205a      	movs	r0, #90	; 0x5a
 8000a7a:	f000 ff17 	bl	80018ac <MLX90614_WriteReg>
  MLX90614_ReadReg(MLX90614_DEFAULT_SA, MLX90614_PWMCTRL, MLX90614_DBG_ON);
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2122      	movs	r1, #34	; 0x22
 8000a82:	205a      	movs	r0, #90	; 0x5a
 8000a84:	f000 ff70 	bl	8001968 <MLX90614_ReadReg>
  /* USER CODE END 2 */
  MAX30100_Init(&hi2c2);
 8000a88:	4819      	ldr	r0, [pc, #100]	; (8000af0 <main+0x124>)
 8000a8a:	f000 fccb 	bl	8001424 <MAX30100_Init>
  MAX30100_SetSpO2SampleRate(MAX30100_SPO2SR_DEFAULT);
 8000a8e:	2001      	movs	r0, #1
 8000a90:	f000 fd9c 	bl	80015cc <MAX30100_SetSpO2SampleRate>
  MAX30100_SetLEDPulseWidth(MAX30100_LEDPW_DEFAULT);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 fdba 	bl	800160e <MAX30100_SetLEDPulseWidth>
  MAX30100_SetLEDCurrent(MAX30100_LEDCURRENT_DEFAULT, MAX30100_LEDCURRENT_DEFAULT);
 8000a9a:	210f      	movs	r1, #15
 8000a9c:	200f      	movs	r0, #15
 8000a9e:	f000 fdd7 	bl	8001650 <MAX30100_SetLEDCurrent>
  MAX30100_SetMode(MAX30100_SPO2_MODE);
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	f000 fd46 	bl	8001534 <MAX30100_SetMode>
//	  HAL_Delay(100);
//	  t_d_sum+=t_d[i];
//	}
//	t=t_d_sum/20;
    /* USER CODE BEGIN 3 */
	r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8000aa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aac:	2201      	movs	r2, #1
 8000aae:	4911      	ldr	r1, [pc, #68]	; (8000af4 <main+0x128>)
 8000ab0:	4811      	ldr	r0, [pc, #68]	; (8000af8 <main+0x12c>)
 8000ab2:	f003 fd26 	bl	8004502 <HAL_UART_Receive>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <main+0x130>)
 8000abc:	701a      	strb	r2, [r3, #0]
	if(r_data_spo2_ir==HAL_OK){
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <main+0x130>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f040 832b 	bne.w	800111e <main+0x752>
		if(data_spo2_ir==49){
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <main+0x128>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b31      	cmp	r3, #49	; 0x31
 8000ace:	f040 8090 	bne.w	8000bf2 <main+0x226>
			MAX30100_ReadFIFO();
 8000ad2:	f000 fdef 	bl	80016b4 <MAX30100_ReadFIFO>
			if(_max30100_mode == MAX30100_SPO2_MODE)
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <main+0x134>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d104      	bne.n	8000ae8 <main+0x11c>
			{
				MAX30100_PlotBothToUART(_max30100_red_sample, _max30100_ir_sample, 16);
 8000ade:	2210      	movs	r2, #16
 8000ae0:	4908      	ldr	r1, [pc, #32]	; (8000b04 <main+0x138>)
 8000ae2:	4809      	ldr	r0, [pc, #36]	; (8000b08 <main+0x13c>)
 8000ae4:	f000 fe68 	bl	80017b8 <MAX30100_PlotBothToUART>
			}

			for(int i=0;i<16;i++){
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	e025      	b.n	8000b3a <main+0x16e>
 8000aee:	bf00      	nop
 8000af0:	2000010c 	.word	0x2000010c
 8000af4:	200000a2 	.word	0x200000a2
 8000af8:	200001a4 	.word	0x200001a4
 8000afc:	200001a0 	.word	0x200001a0
 8000b00:	20000210 	.word	0x20000210
 8000b04:	20000214 	.word	0x20000214
 8000b08:	200001ec 	.word	0x200001ec
				spo2+=_max30100_red_sample[i];
 8000b0c:	4aae      	ldr	r2, [pc, #696]	; (8000dc8 <main+0x3fc>)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b14:	4bad      	ldr	r3, [pc, #692]	; (8000dcc <main+0x400>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	4413      	add	r3, r2
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	4bab      	ldr	r3, [pc, #684]	; (8000dcc <main+0x400>)
 8000b1e:	801a      	strh	r2, [r3, #0]
				ir+=_max30100_ir_sample[i];
 8000b20:	4aab      	ldr	r2, [pc, #684]	; (8000dd0 <main+0x404>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b28:	4baa      	ldr	r3, [pc, #680]	; (8000dd4 <main+0x408>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	4ba8      	ldr	r3, [pc, #672]	; (8000dd4 <main+0x408>)
 8000b32:	801a      	strh	r2, [r3, #0]
			for(int i=0;i<16;i++){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3301      	adds	r3, #1
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	dde5      	ble.n	8000b0c <main+0x140>
			}
			spo2=(spo2/16)+'0';
 8000b40:	4ba2      	ldr	r3, [pc, #648]	; (8000dcc <main+0x400>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	091b      	lsrs	r3, r3, #4
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	3330      	adds	r3, #48	; 0x30
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b9f      	ldr	r3, [pc, #636]	; (8000dcc <main+0x400>)
 8000b4e:	801a      	strh	r2, [r3, #0]
			ir=(ir/16)+'0';
 8000b50:	4ba0      	ldr	r3, [pc, #640]	; (8000dd4 <main+0x408>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	091b      	lsrs	r3, r3, #4
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	3330      	adds	r3, #48	; 0x30
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	4b9d      	ldr	r3, [pc, #628]	; (8000dd4 <main+0x408>)
 8000b5e:	801a      	strh	r2, [r3, #0]
//			flag='1';
			//data_spo2_ir=0;
			HAL_UART_Transmit(&huart2, &MAX30100_Start_Flag, sizeof(MAX30100_Start_Flag),1000);
 8000b60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b64:	2201      	movs	r2, #1
 8000b66:	499c      	ldr	r1, [pc, #624]	; (8000dd8 <main+0x40c>)
 8000b68:	489c      	ldr	r0, [pc, #624]	; (8000ddc <main+0x410>)
 8000b6a:	f003 fc38 	bl	80043de <HAL_UART_Transmit>
			r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8000b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b72:	2201      	movs	r2, #1
 8000b74:	499a      	ldr	r1, [pc, #616]	; (8000de0 <main+0x414>)
 8000b76:	4899      	ldr	r0, [pc, #612]	; (8000ddc <main+0x410>)
 8000b78:	f003 fcc3 	bl	8004502 <HAL_UART_Receive>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <main+0x418>)
 8000b82:	701a      	strb	r2, [r3, #0]
			if(data_spo2_ir==50){
 8000b84:	4b96      	ldr	r3, [pc, #600]	; (8000de0 <main+0x414>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b32      	cmp	r3, #50	; 0x32
 8000b8a:	d132      	bne.n	8000bf2 <main+0x226>
				HAL_UART_Transmit(&huart2, &SPO2_Flag, sizeof(SPO2_Flag),1000);
 8000b8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b90:	2201      	movs	r2, #1
 8000b92:	4995      	ldr	r1, [pc, #596]	; (8000de8 <main+0x41c>)
 8000b94:	4891      	ldr	r0, [pc, #580]	; (8000ddc <main+0x410>)
 8000b96:	f003 fc22 	bl	80043de <HAL_UART_Transmit>
				HAL_Delay(1000);
 8000b9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b9e:	f001 f997 	bl	8001ed0 <HAL_Delay>
				HAL_UART_Transmit(&huart2, &ir, sizeof(ir),1000);
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	2202      	movs	r2, #2
 8000ba8:	498a      	ldr	r1, [pc, #552]	; (8000dd4 <main+0x408>)
 8000baa:	488c      	ldr	r0, [pc, #560]	; (8000ddc <main+0x410>)
 8000bac:	f003 fc17 	bl	80043de <HAL_UART_Transmit>
						//data_spo2_ir=0;
						//			HAL_Delay(100);
				r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8000bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	498a      	ldr	r1, [pc, #552]	; (8000de0 <main+0x414>)
 8000bb8:	4888      	ldr	r0, [pc, #544]	; (8000ddc <main+0x410>)
 8000bba:	f003 fca2 	bl	8004502 <HAL_UART_Receive>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b88      	ldr	r3, [pc, #544]	; (8000de4 <main+0x418>)
 8000bc4:	701a      	strb	r2, [r3, #0]
				if(data_spo2_ir==51){
 8000bc6:	4b86      	ldr	r3, [pc, #536]	; (8000de0 <main+0x414>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b33      	cmp	r3, #51	; 0x33
 8000bcc:	d111      	bne.n	8000bf2 <main+0x226>
					HAL_UART_Transmit(&huart2, &HR_Flag, sizeof(HR_Flag),1000);
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4985      	ldr	r1, [pc, #532]	; (8000dec <main+0x420>)
 8000bd6:	4881      	ldr	r0, [pc, #516]	; (8000ddc <main+0x410>)
 8000bd8:	f003 fc01 	bl	80043de <HAL_UART_Transmit>
					HAL_Delay(1000);
 8000bdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be0:	f001 f976 	bl	8001ed0 <HAL_Delay>
					HAL_UART_Transmit(&huart2, &spo2, sizeof(spo2),1000);
 8000be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be8:	2202      	movs	r2, #2
 8000bea:	4978      	ldr	r1, [pc, #480]	; (8000dcc <main+0x400>)
 8000bec:	487b      	ldr	r0, [pc, #492]	; (8000ddc <main+0x410>)
 8000bee:	f003 fbf6 	bl	80043de <HAL_UART_Transmit>

		}



		if(data_spo2_ir==52){
 8000bf2:	4b7b      	ldr	r3, [pc, #492]	; (8000de0 <main+0x414>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b34      	cmp	r3, #52	; 0x34
 8000bf8:	d172      	bne.n	8000ce0 <main+0x314>

			temp_amb = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TAMB);
 8000bfa:	2106      	movs	r1, #6
 8000bfc:	205a      	movs	r0, #90	; 0x5a
 8000bfe:	f000 fefb 	bl	80019f8 <MLX90614_ReadTemp>
 8000c02:	4602      	mov	r2, r0
 8000c04:	4b7a      	ldr	r3, [pc, #488]	; (8000df0 <main+0x424>)
 8000c06:	601a      	str	r2, [r3, #0]
			temp_obj1 = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TOBJ1);
 8000c08:	2107      	movs	r1, #7
 8000c0a:	205a      	movs	r0, #90	; 0x5a
 8000c0c:	f000 fef4 	bl	80019f8 <MLX90614_ReadTemp>
 8000c10:	4602      	mov	r2, r0
 8000c12:	4b78      	ldr	r3, [pc, #480]	; (8000df4 <main+0x428>)
 8000c14:	601a      	str	r2, [r3, #0]
			t_d=temp_obj1 ;
 8000c16:	4b77      	ldr	r3, [pc, #476]	; (8000df4 <main+0x428>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff feb6 	bl	800098c <__aeabi_f2uiz>
 8000c20:	4603      	mov	r3, r0
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	4b74      	ldr	r3, [pc, #464]	; (8000df8 <main+0x42c>)
 8000c26:	801a      	strh	r2, [r3, #0]
			t_amb=temp_amb ;
 8000c28:	4b71      	ldr	r3, [pc, #452]	; (8000df0 <main+0x424>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fead 	bl	800098c <__aeabi_f2uiz>
 8000c32:	4603      	mov	r3, r0
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4b71      	ldr	r3, [pc, #452]	; (8000dfc <main+0x430>)
 8000c38:	801a      	strh	r2, [r3, #0]
			//data_spo2_ir=0;
			HAL_UART_Transmit(&huart2, &TempTip_StartFlag, sizeof(TempTip_StartFlag),1000);
 8000c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c3e:	2201      	movs	r2, #1
 8000c40:	496f      	ldr	r1, [pc, #444]	; (8000e00 <main+0x434>)
 8000c42:	4866      	ldr	r0, [pc, #408]	; (8000ddc <main+0x410>)
 8000c44:	f003 fbcb 	bl	80043de <HAL_UART_Transmit>

			r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8000c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4964      	ldr	r1, [pc, #400]	; (8000de0 <main+0x414>)
 8000c50:	4862      	ldr	r0, [pc, #392]	; (8000ddc <main+0x410>)
 8000c52:	f003 fc56 	bl	8004502 <HAL_UART_Receive>
 8000c56:	4603      	mov	r3, r0
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b62      	ldr	r3, [pc, #392]	; (8000de4 <main+0x418>)
 8000c5c:	701a      	strb	r2, [r3, #0]
			HAL_Delay(2000);
 8000c5e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c62:	f001 f935 	bl	8001ed0 <HAL_Delay>
			if(data_spo2_ir==53){
 8000c66:	4b5e      	ldr	r3, [pc, #376]	; (8000de0 <main+0x414>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b35      	cmp	r3, #53	; 0x35
 8000c6c:	d138      	bne.n	8000ce0 <main+0x314>
				HAL_UART_Transmit(&huart2, &TempTip_BodyFlag, sizeof(TempTip_BodyFlag),1000);
 8000c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c72:	2201      	movs	r2, #1
 8000c74:	4963      	ldr	r1, [pc, #396]	; (8000e04 <main+0x438>)
 8000c76:	4859      	ldr	r0, [pc, #356]	; (8000ddc <main+0x410>)
 8000c78:	f003 fbb1 	bl	80043de <HAL_UART_Transmit>
				HAL_Delay(1000);
 8000c7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c80:	f001 f926 	bl	8001ed0 <HAL_Delay>
				HAL_UART_Transmit(&huart2, &t_d, sizeof(t_d),1000);
 8000c84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c88:	2202      	movs	r2, #2
 8000c8a:	495b      	ldr	r1, [pc, #364]	; (8000df8 <main+0x42c>)
 8000c8c:	4853      	ldr	r0, [pc, #332]	; (8000ddc <main+0x410>)
 8000c8e:	f003 fba6 	bl	80043de <HAL_UART_Transmit>
				data_spo2_ir=0;
 8000c92:	4b53      	ldr	r3, [pc, #332]	; (8000de0 <main+0x414>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
				r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8000c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4950      	ldr	r1, [pc, #320]	; (8000de0 <main+0x414>)
 8000ca0:	484e      	ldr	r0, [pc, #312]	; (8000ddc <main+0x410>)
 8000ca2:	f003 fc2e 	bl	8004502 <HAL_UART_Receive>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <main+0x418>)
 8000cac:	701a      	strb	r2, [r3, #0]
				if(data_spo2_ir==54){
 8000cae:	4b4c      	ldr	r3, [pc, #304]	; (8000de0 <main+0x414>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b36      	cmp	r3, #54	; 0x36
 8000cb4:	d114      	bne.n	8000ce0 <main+0x314>
					HAL_UART_Transmit(&huart2, &TempTip_AmpFlag, sizeof(TempTip_AmpFlag),1000);
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4952      	ldr	r1, [pc, #328]	; (8000e08 <main+0x43c>)
 8000cbe:	4847      	ldr	r0, [pc, #284]	; (8000ddc <main+0x410>)
 8000cc0:	f003 fb8d 	bl	80043de <HAL_UART_Transmit>
					HAL_Delay(1000);
 8000cc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc8:	f001 f902 	bl	8001ed0 <HAL_Delay>
					HAL_UART_Transmit(&huart2, &t_amb, sizeof(t_amb),1000);
 8000ccc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	494a      	ldr	r1, [pc, #296]	; (8000dfc <main+0x430>)
 8000cd4:	4841      	ldr	r0, [pc, #260]	; (8000ddc <main+0x410>)
 8000cd6:	f003 fb82 	bl	80043de <HAL_UART_Transmit>
					data_spo2_ir=0;
 8000cda:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <main+0x414>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
			}

		}


		if(data_spo2_ir==55){
 8000ce0:	4b3f      	ldr	r3, [pc, #252]	; (8000de0 <main+0x414>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b37      	cmp	r3, #55	; 0x37
 8000ce6:	f040 821a 	bne.w	800111e <main+0x752>

			temp_amb = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TAMB);
 8000cea:	2106      	movs	r1, #6
 8000cec:	205a      	movs	r0, #90	; 0x5a
 8000cee:	f000 fe83 	bl	80019f8 <MLX90614_ReadTemp>
 8000cf2:	4602      	mov	r2, r0
 8000cf4:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <main+0x424>)
 8000cf6:	601a      	str	r2, [r3, #0]
			temp_obj1 = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TOBJ1);
 8000cf8:	2107      	movs	r1, #7
 8000cfa:	205a      	movs	r0, #90	; 0x5a
 8000cfc:	f000 fe7c 	bl	80019f8 <MLX90614_ReadTemp>
 8000d00:	4602      	mov	r2, r0
 8000d02:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <main+0x428>)
 8000d04:	601a      	str	r2, [r3, #0]
			t_d=temp_obj1 ;
 8000d06:	4b3b      	ldr	r3, [pc, #236]	; (8000df4 <main+0x428>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe3e 	bl	800098c <__aeabi_f2uiz>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b38      	ldr	r3, [pc, #224]	; (8000df8 <main+0x42c>)
 8000d16:	801a      	strh	r2, [r3, #0]
			t_amb=temp_amb ;
 8000d18:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <main+0x424>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe35 	bl	800098c <__aeabi_f2uiz>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <main+0x430>)
 8000d28:	801a      	strh	r2, [r3, #0]
			//data_spo2_ir=0;
			HAL_UART_Transmit(&huart2, &TempRest_StartFlag, sizeof(TempRest_StartFlag),1000);
 8000d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4936      	ldr	r1, [pc, #216]	; (8000e0c <main+0x440>)
 8000d32:	482a      	ldr	r0, [pc, #168]	; (8000ddc <main+0x410>)
 8000d34:	f003 fb53 	bl	80043de <HAL_UART_Transmit>
			r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8000d38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4928      	ldr	r1, [pc, #160]	; (8000de0 <main+0x414>)
 8000d40:	4826      	ldr	r0, [pc, #152]	; (8000ddc <main+0x410>)
 8000d42:	f003 fbde 	bl	8004502 <HAL_UART_Receive>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <main+0x418>)
 8000d4c:	701a      	strb	r2, [r3, #0]
			if(data_spo2_ir==56){
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <main+0x414>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b38      	cmp	r3, #56	; 0x38
 8000d54:	f040 81e3 	bne.w	800111e <main+0x752>
				HAL_UART_Transmit(&huart2, &TempRest_BodyFlag, sizeof(TempRest_BodyFlag),1000);
 8000d58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	492c      	ldr	r1, [pc, #176]	; (8000e10 <main+0x444>)
 8000d60:	481e      	ldr	r0, [pc, #120]	; (8000ddc <main+0x410>)
 8000d62:	f003 fb3c 	bl	80043de <HAL_UART_Transmit>
				HAL_Delay(1000);
 8000d66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6a:	f001 f8b1 	bl	8001ed0 <HAL_Delay>
				HAL_UART_Transmit(&huart2, &t_d, sizeof(t_d),1000);
 8000d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d72:	2202      	movs	r2, #2
 8000d74:	4920      	ldr	r1, [pc, #128]	; (8000df8 <main+0x42c>)
 8000d76:	4819      	ldr	r0, [pc, #100]	; (8000ddc <main+0x410>)
 8000d78:	f003 fb31 	bl	80043de <HAL_UART_Transmit>
				//data_spo2_ir=0;
				r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8000d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d80:	2201      	movs	r2, #1
 8000d82:	4917      	ldr	r1, [pc, #92]	; (8000de0 <main+0x414>)
 8000d84:	4815      	ldr	r0, [pc, #84]	; (8000ddc <main+0x410>)
 8000d86:	f003 fbbc 	bl	8004502 <HAL_UART_Receive>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <main+0x418>)
 8000d90:	701a      	strb	r2, [r3, #0]
				if(data_spo2_ir==57){
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <main+0x414>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b39      	cmp	r3, #57	; 0x39
 8000d98:	f040 81c1 	bne.w	800111e <main+0x752>
					HAL_UART_Transmit(&huart2, &TempRest_AmbFlag, sizeof(TempRest_AmbFlag),1000);
 8000d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da0:	2201      	movs	r2, #1
 8000da2:	491c      	ldr	r1, [pc, #112]	; (8000e14 <main+0x448>)
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <main+0x410>)
 8000da6:	f003 fb1a 	bl	80043de <HAL_UART_Transmit>
					HAL_Delay(1000);
 8000daa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dae:	f001 f88f 	bl	8001ed0 <HAL_Delay>
					HAL_UART_Transmit(&huart2, &t_amb, sizeof(t_amb),1000);
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	2202      	movs	r2, #2
 8000db8:	4910      	ldr	r1, [pc, #64]	; (8000dfc <main+0x430>)
 8000dba:	4808      	ldr	r0, [pc, #32]	; (8000ddc <main+0x410>)
 8000dbc:	f003 fb0f 	bl	80043de <HAL_UART_Transmit>
					data_spo2_ir=0;
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <main+0x414>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	701a      	strb	r2, [r3, #0]
		}



	}
	while(r_data_spo2_ir==HAL_TIMEOUT){
 8000dc6:	e1aa      	b.n	800111e <main+0x752>
 8000dc8:	200001ec 	.word	0x200001ec
 8000dcc:	200000a8 	.word	0x200000a8
 8000dd0:	20000214 	.word	0x20000214
 8000dd4:	200000a6 	.word	0x200000a6
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	200001a4 	.word	0x200001a4
 8000de0:	200000a2 	.word	0x200000a2
 8000de4:	200001a0 	.word	0x200001a0
 8000de8:	20000001 	.word	0x20000001
 8000dec:	20000002 	.word	0x20000002
 8000df0:	2000009c 	.word	0x2000009c
 8000df4:	20000098 	.word	0x20000098
 8000df8:	200000a4 	.word	0x200000a4
 8000dfc:	200000a0 	.word	0x200000a0
 8000e00:	20000003 	.word	0x20000003
 8000e04:	20000004 	.word	0x20000004
 8000e08:	20000005 	.word	0x20000005
 8000e0c:	20000006 	.word	0x20000006
 8000e10:	20000007 	.word	0x20000007
 8000e14:	20000008 	.word	0x20000008
		r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8000e18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	4910      	ldr	r1, [pc, #64]	; (8000e60 <main+0x494>)
 8000e20:	4810      	ldr	r0, [pc, #64]	; (8000e64 <main+0x498>)
 8000e22:	f003 fb6e 	bl	8004502 <HAL_UART_Receive>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <main+0x49c>)
 8000e2c:	701a      	strb	r2, [r3, #0]
		if(r_data_spo2_ir==HAL_OK){
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <main+0x49c>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	f040 8173 	bne.w	800111e <main+0x752>
			if(data_spo2_ir==49){
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <main+0x494>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b31      	cmp	r3, #49	; 0x31
 8000e3e:	f040 808e 	bne.w	8000f5e <main+0x592>
					MAX30100_ReadFIFO();
 8000e42:	f000 fc37 	bl	80016b4 <MAX30100_ReadFIFO>
					if(_max30100_mode == MAX30100_SPO2_MODE)
 8000e46:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <main+0x4a0>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	d104      	bne.n	8000e58 <main+0x48c>
					{
						MAX30100_PlotBothToUART(_max30100_red_sample, _max30100_ir_sample, 16);
 8000e4e:	2210      	movs	r2, #16
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <main+0x4a4>)
 8000e52:	4808      	ldr	r0, [pc, #32]	; (8000e74 <main+0x4a8>)
 8000e54:	f000 fcb0 	bl	80017b8 <MAX30100_PlotBothToUART>
					}

					for(int i=0;i<16;i++){
 8000e58:	2300      	movs	r3, #0
 8000e5a:	603b      	str	r3, [r7, #0]
 8000e5c:	e023      	b.n	8000ea6 <main+0x4da>
 8000e5e:	bf00      	nop
 8000e60:	200000a2 	.word	0x200000a2
 8000e64:	200001a4 	.word	0x200001a4
 8000e68:	200001a0 	.word	0x200001a0
 8000e6c:	20000210 	.word	0x20000210
 8000e70:	20000214 	.word	0x20000214
 8000e74:	200001ec 	.word	0x200001ec
						spo2+=_max30100_red_sample[i];
 8000e78:	4aac      	ldr	r2, [pc, #688]	; (800112c <main+0x760>)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e80:	4bab      	ldr	r3, [pc, #684]	; (8001130 <main+0x764>)
 8000e82:	881b      	ldrh	r3, [r3, #0]
 8000e84:	4413      	add	r3, r2
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	4ba9      	ldr	r3, [pc, #676]	; (8001130 <main+0x764>)
 8000e8a:	801a      	strh	r2, [r3, #0]
						ir+=_max30100_ir_sample[i];
 8000e8c:	4aa9      	ldr	r2, [pc, #676]	; (8001134 <main+0x768>)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e94:	4ba8      	ldr	r3, [pc, #672]	; (8001138 <main+0x76c>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	4413      	add	r3, r2
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4ba6      	ldr	r3, [pc, #664]	; (8001138 <main+0x76c>)
 8000e9e:	801a      	strh	r2, [r3, #0]
					for(int i=0;i<16;i++){
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	dde5      	ble.n	8000e78 <main+0x4ac>
					}
					spo2=(spo2/16)+'0';
 8000eac:	4ba0      	ldr	r3, [pc, #640]	; (8001130 <main+0x764>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	3330      	adds	r3, #48	; 0x30
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	4b9d      	ldr	r3, [pc, #628]	; (8001130 <main+0x764>)
 8000eba:	801a      	strh	r2, [r3, #0]
					ir=(ir/16)+'0';
 8000ebc:	4b9e      	ldr	r3, [pc, #632]	; (8001138 <main+0x76c>)
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	091b      	lsrs	r3, r3, #4
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	3330      	adds	r3, #48	; 0x30
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	4b9b      	ldr	r3, [pc, #620]	; (8001138 <main+0x76c>)
 8000eca:	801a      	strh	r2, [r3, #0]
		//			flag='1';
					//data_spo2_ir=0;
					HAL_UART_Transmit(&huart2, &MAX30100_Start_Flag, sizeof(MAX30100_Start_Flag),1000);
 8000ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	499a      	ldr	r1, [pc, #616]	; (800113c <main+0x770>)
 8000ed4:	489a      	ldr	r0, [pc, #616]	; (8001140 <main+0x774>)
 8000ed6:	f003 fa82 	bl	80043de <HAL_UART_Transmit>
					r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4998      	ldr	r1, [pc, #608]	; (8001144 <main+0x778>)
 8000ee2:	4897      	ldr	r0, [pc, #604]	; (8001140 <main+0x774>)
 8000ee4:	f003 fb0d 	bl	8004502 <HAL_UART_Receive>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	461a      	mov	r2, r3
 8000eec:	4b96      	ldr	r3, [pc, #600]	; (8001148 <main+0x77c>)
 8000eee:	701a      	strb	r2, [r3, #0]
					if(data_spo2_ir==50){
 8000ef0:	4b94      	ldr	r3, [pc, #592]	; (8001144 <main+0x778>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b32      	cmp	r3, #50	; 0x32
 8000ef6:	d132      	bne.n	8000f5e <main+0x592>
						HAL_UART_Transmit(&huart2, &SPO2_Flag, sizeof(SPO2_Flag),1000);
 8000ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efc:	2201      	movs	r2, #1
 8000efe:	4993      	ldr	r1, [pc, #588]	; (800114c <main+0x780>)
 8000f00:	488f      	ldr	r0, [pc, #572]	; (8001140 <main+0x774>)
 8000f02:	f003 fa6c 	bl	80043de <HAL_UART_Transmit>
						HAL_Delay(1000);
 8000f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f0a:	f000 ffe1 	bl	8001ed0 <HAL_Delay>
						HAL_UART_Transmit(&huart2, &ir, sizeof(ir),1000);
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	2202      	movs	r2, #2
 8000f14:	4988      	ldr	r1, [pc, #544]	; (8001138 <main+0x76c>)
 8000f16:	488a      	ldr	r0, [pc, #552]	; (8001140 <main+0x774>)
 8000f18:	f003 fa61 	bl	80043de <HAL_UART_Transmit>
						//data_spo2_ir=0;
						//			HAL_Delay(100);
						r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8000f1c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f20:	2201      	movs	r2, #1
 8000f22:	4988      	ldr	r1, [pc, #544]	; (8001144 <main+0x778>)
 8000f24:	4886      	ldr	r0, [pc, #536]	; (8001140 <main+0x774>)
 8000f26:	f003 faec 	bl	8004502 <HAL_UART_Receive>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b86      	ldr	r3, [pc, #536]	; (8001148 <main+0x77c>)
 8000f30:	701a      	strb	r2, [r3, #0]
						if(data_spo2_ir==51){
 8000f32:	4b84      	ldr	r3, [pc, #528]	; (8001144 <main+0x778>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b33      	cmp	r3, #51	; 0x33
 8000f38:	d111      	bne.n	8000f5e <main+0x592>
							HAL_UART_Transmit(&huart2, &HR_Flag, sizeof(HR_Flag),1000);
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4983      	ldr	r1, [pc, #524]	; (8001150 <main+0x784>)
 8000f42:	487f      	ldr	r0, [pc, #508]	; (8001140 <main+0x774>)
 8000f44:	f003 fa4b 	bl	80043de <HAL_UART_Transmit>
							HAL_Delay(1000);
 8000f48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f4c:	f000 ffc0 	bl	8001ed0 <HAL_Delay>
							HAL_UART_Transmit(&huart2, &spo2, sizeof(spo2),1000);
 8000f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f54:	2202      	movs	r2, #2
 8000f56:	4976      	ldr	r1, [pc, #472]	; (8001130 <main+0x764>)
 8000f58:	4879      	ldr	r0, [pc, #484]	; (8001140 <main+0x774>)
 8000f5a:	f003 fa40 	bl	80043de <HAL_UART_Transmit>


			}


			if(data_spo2_ir==52){
 8000f5e:	4b79      	ldr	r3, [pc, #484]	; (8001144 <main+0x778>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b34      	cmp	r3, #52	; 0x34
 8000f64:	d16b      	bne.n	800103e <main+0x672>

				temp_amb = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TAMB);
 8000f66:	2106      	movs	r1, #6
 8000f68:	205a      	movs	r0, #90	; 0x5a
 8000f6a:	f000 fd45 	bl	80019f8 <MLX90614_ReadTemp>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	4b78      	ldr	r3, [pc, #480]	; (8001154 <main+0x788>)
 8000f72:	601a      	str	r2, [r3, #0]
				temp_obj1 = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TOBJ1);
 8000f74:	2107      	movs	r1, #7
 8000f76:	205a      	movs	r0, #90	; 0x5a
 8000f78:	f000 fd3e 	bl	80019f8 <MLX90614_ReadTemp>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	4b76      	ldr	r3, [pc, #472]	; (8001158 <main+0x78c>)
 8000f80:	601a      	str	r2, [r3, #0]
				t_d=temp_obj1 ;
 8000f82:	4b75      	ldr	r3, [pc, #468]	; (8001158 <main+0x78c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fd00 	bl	800098c <__aeabi_f2uiz>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	4b72      	ldr	r3, [pc, #456]	; (800115c <main+0x790>)
 8000f92:	801a      	strh	r2, [r3, #0]
				t_amb=temp_amb ;
 8000f94:	4b6f      	ldr	r3, [pc, #444]	; (8001154 <main+0x788>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fcf7 	bl	800098c <__aeabi_f2uiz>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	4b6f      	ldr	r3, [pc, #444]	; (8001160 <main+0x794>)
 8000fa4:	801a      	strh	r2, [r3, #0]
				//data_spo2_ir=0;
				HAL_UART_Transmit(&huart2, &TempTip_StartFlag, sizeof(TempTip_StartFlag),1000);
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	2201      	movs	r2, #1
 8000fac:	496d      	ldr	r1, [pc, #436]	; (8001164 <main+0x798>)
 8000fae:	4864      	ldr	r0, [pc, #400]	; (8001140 <main+0x774>)
 8000fb0:	f003 fa15 	bl	80043de <HAL_UART_Transmit>
				r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8000fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb8:	2201      	movs	r2, #1
 8000fba:	4962      	ldr	r1, [pc, #392]	; (8001144 <main+0x778>)
 8000fbc:	4860      	ldr	r0, [pc, #384]	; (8001140 <main+0x774>)
 8000fbe:	f003 faa0 	bl	8004502 <HAL_UART_Receive>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b60      	ldr	r3, [pc, #384]	; (8001148 <main+0x77c>)
 8000fc8:	701a      	strb	r2, [r3, #0]
				if(data_spo2_ir==53){
 8000fca:	4b5e      	ldr	r3, [pc, #376]	; (8001144 <main+0x778>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b35      	cmp	r3, #53	; 0x35
 8000fd0:	d135      	bne.n	800103e <main+0x672>
					HAL_UART_Transmit(&huart2, &TempTip_BodyFlag, sizeof(TempTip_BodyFlag),1000);
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4963      	ldr	r1, [pc, #396]	; (8001168 <main+0x79c>)
 8000fda:	4859      	ldr	r0, [pc, #356]	; (8001140 <main+0x774>)
 8000fdc:	f003 f9ff 	bl	80043de <HAL_UART_Transmit>
					HAL_Delay(1000);
 8000fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe4:	f000 ff74 	bl	8001ed0 <HAL_Delay>
					HAL_UART_Transmit(&huart2, &t_d, sizeof(t_d),1000);
 8000fe8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fec:	2202      	movs	r2, #2
 8000fee:	495b      	ldr	r1, [pc, #364]	; (800115c <main+0x790>)
 8000ff0:	4853      	ldr	r0, [pc, #332]	; (8001140 <main+0x774>)
 8000ff2:	f003 f9f4 	bl	80043de <HAL_UART_Transmit>
					//data_spo2_ir=0;
					r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4951      	ldr	r1, [pc, #324]	; (8001144 <main+0x778>)
 8000ffe:	4850      	ldr	r0, [pc, #320]	; (8001140 <main+0x774>)
 8001000:	f003 fa7f 	bl	8004502 <HAL_UART_Receive>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <main+0x77c>)
 800100a:	701a      	strb	r2, [r3, #0]
					if(data_spo2_ir==54){
 800100c:	4b4d      	ldr	r3, [pc, #308]	; (8001144 <main+0x778>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b36      	cmp	r3, #54	; 0x36
 8001012:	d114      	bne.n	800103e <main+0x672>
						HAL_UART_Transmit(&huart2, &TempTip_AmpFlag, sizeof(TempTip_AmpFlag),1000);
 8001014:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001018:	2201      	movs	r2, #1
 800101a:	4954      	ldr	r1, [pc, #336]	; (800116c <main+0x7a0>)
 800101c:	4848      	ldr	r0, [pc, #288]	; (8001140 <main+0x774>)
 800101e:	f003 f9de 	bl	80043de <HAL_UART_Transmit>
						HAL_Delay(1000);
 8001022:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001026:	f000 ff53 	bl	8001ed0 <HAL_Delay>
						HAL_UART_Transmit(&huart2, &t_amb, sizeof(t_amb),1000);
 800102a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102e:	2202      	movs	r2, #2
 8001030:	494b      	ldr	r1, [pc, #300]	; (8001160 <main+0x794>)
 8001032:	4843      	ldr	r0, [pc, #268]	; (8001140 <main+0x774>)
 8001034:	f003 f9d3 	bl	80043de <HAL_UART_Transmit>
						data_spo2_ir=0;
 8001038:	4b42      	ldr	r3, [pc, #264]	; (8001144 <main+0x778>)
 800103a:	2200      	movs	r2, #0
 800103c:	701a      	strb	r2, [r3, #0]
				}

			}


			if(data_spo2_ir==55){
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <main+0x778>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b37      	cmp	r3, #55	; 0x37
 8001044:	d16b      	bne.n	800111e <main+0x752>

				temp_amb = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TAMB);
 8001046:	2106      	movs	r1, #6
 8001048:	205a      	movs	r0, #90	; 0x5a
 800104a:	f000 fcd5 	bl	80019f8 <MLX90614_ReadTemp>
 800104e:	4602      	mov	r2, r0
 8001050:	4b40      	ldr	r3, [pc, #256]	; (8001154 <main+0x788>)
 8001052:	601a      	str	r2, [r3, #0]
				temp_obj1 = MLX90614_ReadTemp(MLX90614_DEFAULT_SA, MLX90614_TOBJ1);
 8001054:	2107      	movs	r1, #7
 8001056:	205a      	movs	r0, #90	; 0x5a
 8001058:	f000 fcce 	bl	80019f8 <MLX90614_ReadTemp>
 800105c:	4602      	mov	r2, r0
 800105e:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <main+0x78c>)
 8001060:	601a      	str	r2, [r3, #0]
				t_d=temp_obj1 ;
 8001062:	4b3d      	ldr	r3, [pc, #244]	; (8001158 <main+0x78c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fc90 	bl	800098c <__aeabi_f2uiz>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	4b3a      	ldr	r3, [pc, #232]	; (800115c <main+0x790>)
 8001072:	801a      	strh	r2, [r3, #0]
				t_amb=temp_amb ;
 8001074:	4b37      	ldr	r3, [pc, #220]	; (8001154 <main+0x788>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fc87 	bl	800098c <__aeabi_f2uiz>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b37      	ldr	r3, [pc, #220]	; (8001160 <main+0x794>)
 8001084:	801a      	strh	r2, [r3, #0]
				//data_spo2_ir=0;
				HAL_UART_Transmit(&huart2, &TempRest_StartFlag, sizeof(TempRest_StartFlag),1000);
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	2201      	movs	r2, #1
 800108c:	4938      	ldr	r1, [pc, #224]	; (8001170 <main+0x7a4>)
 800108e:	482c      	ldr	r0, [pc, #176]	; (8001140 <main+0x774>)
 8001090:	f003 f9a5 	bl	80043de <HAL_UART_Transmit>
				r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8001094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001098:	2201      	movs	r2, #1
 800109a:	492a      	ldr	r1, [pc, #168]	; (8001144 <main+0x778>)
 800109c:	4828      	ldr	r0, [pc, #160]	; (8001140 <main+0x774>)
 800109e:	f003 fa30 	bl	8004502 <HAL_UART_Receive>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b28      	ldr	r3, [pc, #160]	; (8001148 <main+0x77c>)
 80010a8:	701a      	strb	r2, [r3, #0]
				if(data_spo2_ir==56){
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <main+0x778>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b38      	cmp	r3, #56	; 0x38
 80010b0:	d135      	bne.n	800111e <main+0x752>
					HAL_UART_Transmit(&huart2, &TempRest_BodyFlag, sizeof(TempRest_BodyFlag),1000);
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	2201      	movs	r2, #1
 80010b8:	492e      	ldr	r1, [pc, #184]	; (8001174 <main+0x7a8>)
 80010ba:	4821      	ldr	r0, [pc, #132]	; (8001140 <main+0x774>)
 80010bc:	f003 f98f 	bl	80043de <HAL_UART_Transmit>
					HAL_Delay(1000);
 80010c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c4:	f000 ff04 	bl	8001ed0 <HAL_Delay>
					HAL_UART_Transmit(&huart2, &t_d, sizeof(t_d),1000);
 80010c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010cc:	2202      	movs	r2, #2
 80010ce:	4923      	ldr	r1, [pc, #140]	; (800115c <main+0x790>)
 80010d0:	481b      	ldr	r0, [pc, #108]	; (8001140 <main+0x774>)
 80010d2:	f003 f984 	bl	80043de <HAL_UART_Transmit>
					//data_spo2_ir=0;
					r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	2201      	movs	r2, #1
 80010dc:	4919      	ldr	r1, [pc, #100]	; (8001144 <main+0x778>)
 80010de:	4818      	ldr	r0, [pc, #96]	; (8001140 <main+0x774>)
 80010e0:	f003 fa0f 	bl	8004502 <HAL_UART_Receive>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	4b17      	ldr	r3, [pc, #92]	; (8001148 <main+0x77c>)
 80010ea:	701a      	strb	r2, [r3, #0]
					if(data_spo2_ir==57){
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <main+0x778>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b39      	cmp	r3, #57	; 0x39
 80010f2:	d114      	bne.n	800111e <main+0x752>
						HAL_UART_Transmit(&huart2, &TempRest_AmbFlag, sizeof(TempRest_AmbFlag),1000);
 80010f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f8:	2201      	movs	r2, #1
 80010fa:	491f      	ldr	r1, [pc, #124]	; (8001178 <main+0x7ac>)
 80010fc:	4810      	ldr	r0, [pc, #64]	; (8001140 <main+0x774>)
 80010fe:	f003 f96e 	bl	80043de <HAL_UART_Transmit>
						HAL_Delay(1000);
 8001102:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001106:	f000 fee3 	bl	8001ed0 <HAL_Delay>
						HAL_UART_Transmit(&huart2, &t_amb, sizeof(t_amb),1000);
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	2202      	movs	r2, #2
 8001110:	4913      	ldr	r1, [pc, #76]	; (8001160 <main+0x794>)
 8001112:	480b      	ldr	r0, [pc, #44]	; (8001140 <main+0x774>)
 8001114:	f003 f963 	bl	80043de <HAL_UART_Transmit>
						data_spo2_ir=0;
 8001118:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <main+0x778>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
	while(r_data_spo2_ir==HAL_TIMEOUT){
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <main+0x77c>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b03      	cmp	r3, #3
 8001124:	f43f ae78 	beq.w	8000e18 <main+0x44c>
	r_data_spo2_ir=HAL_UART_Receive(&huart2, &data_spo2_ir, sizeof(data_spo2_ir),1000);
 8001128:	e4be      	b.n	8000aa8 <main+0xdc>
 800112a:	bf00      	nop
 800112c:	200001ec 	.word	0x200001ec
 8001130:	200000a8 	.word	0x200000a8
 8001134:	20000214 	.word	0x20000214
 8001138:	200000a6 	.word	0x200000a6
 800113c:	20000000 	.word	0x20000000
 8001140:	200001a4 	.word	0x200001a4
 8001144:	200000a2 	.word	0x200000a2
 8001148:	200001a0 	.word	0x200001a0
 800114c:	20000001 	.word	0x20000001
 8001150:	20000002 	.word	0x20000002
 8001154:	2000009c 	.word	0x2000009c
 8001158:	20000098 	.word	0x20000098
 800115c:	200000a4 	.word	0x200000a4
 8001160:	200000a0 	.word	0x200000a0
 8001164:	20000003 	.word	0x20000003
 8001168:	20000004 	.word	0x20000004
 800116c:	20000005 	.word	0x20000005
 8001170:	20000006 	.word	0x20000006
 8001174:	20000007 	.word	0x20000007
 8001178:	20000008 	.word	0x20000008

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b090      	sub	sp, #64	; 0x40
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0318 	add.w	r3, r7, #24
 8001186:	2228      	movs	r2, #40	; 0x28
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f003 fd8e 	bl	8004cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800119e:	2301      	movs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b0:	2302      	movs	r3, #2
 80011b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 fca1 	bl	8003b0c <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011d0:	f000 f922 	bl	8001418 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	230f      	movs	r3, #15
 80011d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d8:	2302      	movs	r3, #2
 80011da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2102      	movs	r1, #2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f002 ff0c 	bl	800400c <HAL_RCC_ClockConfig>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011fa:	f000 f90d 	bl	8001418 <Error_Handler>
  }
}
 80011fe:	bf00      	nop
 8001200:	3740      	adds	r7, #64	; 0x40
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_I2C1_Init+0x50>)
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <MX_I2C1_Init+0x54>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_I2C1_Init+0x50>)
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_I2C1_Init+0x58>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_I2C1_Init+0x50>)
 8001226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_I2C1_Init+0x50>)
 8001246:	f001 f95b 	bl	8002500 <HAL_I2C_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001250:	f000 f8e2 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000b8 	.word	0x200000b8
 800125c:	40005400 	.word	0x40005400
 8001260:	000186a0 	.word	0x000186a0

08001264 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_I2C2_Init+0x50>)
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <MX_I2C2_Init+0x54>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_I2C2_Init+0x50>)
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <MX_I2C2_Init+0x58>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_I2C2_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_I2C2_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_I2C2_Init+0x50>)
 8001282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001286:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <MX_I2C2_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_I2C2_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_I2C2_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_I2C2_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_I2C2_Init+0x50>)
 80012a2:	f001 f92d 	bl	8002500 <HAL_I2C_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012ac:	f000 f8b4 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	2000010c 	.word	0x2000010c
 80012b8:	40005800 	.word	0x40005800
 80012bc:	000186a0 	.word	0x000186a0

080012c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_USART1_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012f8:	f003 f824 	bl	8004344 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 f889 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000160 	.word	0x20000160
 8001310:	40013800 	.word	0x40013800

08001314 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_USART2_UART_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001320:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800134c:	f002 fffa 	bl	8004344 <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001356:	f000 f85f 	bl	8001418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001a4 	.word	0x200001a4
 8001364:	40004400 	.word	0x40004400

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	f107 0310 	add.w	r3, r7, #16
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <MX_GPIO_Init+0xa8>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a23      	ldr	r2, [pc, #140]	; (8001410 <MX_GPIO_Init+0xa8>)
 8001382:	f043 0310 	orr.w	r3, r3, #16
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b21      	ldr	r3, [pc, #132]	; (8001410 <MX_GPIO_Init+0xa8>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <MX_GPIO_Init+0xa8>)
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <MX_GPIO_Init+0xa8>)
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	6193      	str	r3, [r2, #24]
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <MX_GPIO_Init+0xa8>)
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	f003 0320 	and.w	r3, r3, #32
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ac:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_GPIO_Init+0xa8>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a17      	ldr	r2, [pc, #92]	; (8001410 <MX_GPIO_Init+0xa8>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b15      	ldr	r3, [pc, #84]	; (8001410 <MX_GPIO_Init+0xa8>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0304 	and.w	r3, r3, #4
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_GPIO_Init+0xa8>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a11      	ldr	r2, [pc, #68]	; (8001410 <MX_GPIO_Init+0xa8>)
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_GPIO_Init+0xa8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0308 	and.w	r3, r3, #8
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e2:	480c      	ldr	r0, [pc, #48]	; (8001414 <MX_GPIO_Init+0xac>)
 80013e4:	f001 f874 	bl	80024d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80013e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_GPIO_Init+0xac>)
 8001402:	f000 ff0b 	bl	800221c <HAL_GPIO_Init>

}
 8001406:	bf00      	nop
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	40011000 	.word	0x40011000

08001418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <MAX30100_Init>:
uint8_t _max30100_red_current;
uint8_t _max30100_ir_current_prev;
uint8_t _max30100_red_current_prev;
float _max30100_temp;

void MAX30100_Init(I2C_HandleTypeDef *ui2c){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	_max30100_ui2c = ui2c;
 800142c:	4a05      	ldr	r2, [pc, #20]	; (8001444 <MAX30100_Init+0x20>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
#if 0
	_max30100_uuart = uuart;
#endif
	MAX30100_Stop();
 8001432:	f000 f9fb 	bl	800182c <MAX30100_Stop>
	MAX30100_ClearFIFO();
 8001436:	f000 f92d 	bl	8001694 <MAX30100_ClearFIFO>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200001e8 	.word	0x200001e8

08001448 <MAX30100_ReadReg>:

uint8_t MAX30100_ReadReg(uint8_t regAddr){
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af02      	add	r7, sp, #8
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = regAddr, result;
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, &reg, 1, MAX30100_TIMEOUT);
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <MAX30100_ReadReg+0x44>)
 8001458:	6818      	ldr	r0, [r3, #0]
 800145a:	f107 020f 	add.w	r2, r7, #15
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2301      	movs	r3, #1
 8001466:	21ae      	movs	r1, #174	; 0xae
 8001468:	f001 f982 	bl	8002770 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_max30100_ui2c, MAX30100_I2C_ADDR, &result, 1, MAX30100_TIMEOUT);
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <MAX30100_ReadReg+0x44>)
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	f107 020e 	add.w	r2, r7, #14
 8001474:	f04f 33ff 	mov.w	r3, #4294967295
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	21ae      	movs	r1, #174	; 0xae
 800147e:	f001 fa75 	bl	800296c <HAL_I2C_Master_Receive>
	return result;
 8001482:	7bbb      	ldrb	r3, [r7, #14]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200001e8 	.word	0x200001e8

08001490 <MAX30100_WriteReg>:

void MAX30100_WriteReg(uint8_t regAddr, uint8_t byte){
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af02      	add	r7, sp, #8
 8001496:	4603      	mov	r3, r0
 8001498:	460a      	mov	r2, r1
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	4613      	mov	r3, r2
 800149e:	71bb      	strb	r3, [r7, #6]
	uint8_t reg[2] = { regAddr, byte };
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	733b      	strb	r3, [r7, #12]
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, reg, 2, MAX30100_TIMEOUT);
 80014a8:	4b07      	ldr	r3, [pc, #28]	; (80014c8 <MAX30100_WriteReg+0x38>)
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	f107 020c 	add.w	r2, r7, #12
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2302      	movs	r3, #2
 80014b8:	21ae      	movs	r1, #174	; 0xae
 80014ba:	f001 f959 	bl	8002770 <HAL_I2C_Master_Transmit>
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200001e8 	.word	0x200001e8

080014cc <MAX30100_EnableInterrupt>:

void MAX30100_EnableInterrupt(uint8_t a_full, uint8_t tmp_rdy, uint8_t hr_rdy, uint8_t spo2){
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4604      	mov	r4, r0
 80014d4:	4608      	mov	r0, r1
 80014d6:	4611      	mov	r1, r2
 80014d8:	461a      	mov	r2, r3
 80014da:	4623      	mov	r3, r4
 80014dc:	71fb      	strb	r3, [r7, #7]
 80014de:	4603      	mov	r3, r0
 80014e0:	71bb      	strb	r3, [r7, #6]
 80014e2:	460b      	mov	r3, r1
 80014e4:	717b      	strb	r3, [r7, #5]
 80014e6:	4613      	mov	r3, r2
 80014e8:	713b      	strb	r3, [r7, #4]
	uint8_t itReg = ((a_full & 0x01) << MAX30100_ENB_A_FULL) | ((tmp_rdy & 0x01) << MAX30100_ENB_TMP_RDY) | ((hr_rdy & 0x01) << MAX30100_ENB_HR_RDY) | ((spo2 & 0x01) << MAX30100_ENB_SPO2_RDY);
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	01db      	lsls	r3, r3, #7
 80014ee:	b25a      	sxtb	r2, r3
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	019b      	lsls	r3, r3, #6
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b25a      	sxtb	r2, r3
 8001500:	797b      	ldrb	r3, [r7, #5]
 8001502:	015b      	lsls	r3, r3, #5
 8001504:	b25b      	sxtb	r3, r3
 8001506:	f003 0320 	and.w	r3, r3, #32
 800150a:	b25b      	sxtb	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b25a      	sxtb	r2, r3
 8001510:	793b      	ldrb	r3, [r7, #4]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	b25b      	sxtb	r3, r3
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	b25b      	sxtb	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b25b      	sxtb	r3, r3
 8001520:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_INTERRUPT_ENB, itReg);
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	4619      	mov	r1, r3
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff ffb2 	bl	8001490 <MAX30100_WriteReg>
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bd90      	pop	{r4, r7, pc}

08001534 <MAX30100_SetMode>:
	}else if((itReg >> MAX30100_SPO2_RDY) & 0x01){

	}
}

void MAX30100_SetMode(enum MAX30100_Mode mode){
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	_max30100_mode = mode;
 800153e:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <MAX30100_SetMode+0x94>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	7013      	strb	r3, [r2, #0]
	uint8_t modeReg = (MAX30100_ReadReg(MAX30100_MODE_CONFIG) & ~(0x07)) | ((mode << MAX30100_MODE) & 0x07);
 8001544:	2006      	movs	r0, #6
 8001546:	f7ff ff7f 	bl	8001448 <MAX30100_ReadReg>
 800154a:	4603      	mov	r3, r0
 800154c:	b25b      	sxtb	r3, r3
 800154e:	f023 0307 	bic.w	r3, r3, #7
 8001552:	b25a      	sxtb	r2, r3
 8001554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001558:	f003 0307 	and.w	r3, r3, #7
 800155c:	b25b      	sxtb	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b25b      	sxtb	r3, r3
 8001562:	73fb      	strb	r3, [r7, #15]
	if(mode == MAX30100_SPO2_MODE)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2b03      	cmp	r3, #3
 8001568:	d104      	bne.n	8001574 <MAX30100_SetMode+0x40>
		modeReg |= 0x08;
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	f043 0308 	orr.w	r3, r3, #8
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e003      	b.n	800157c <MAX30100_SetMode+0x48>
	else
		modeReg &= ~0x08;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	f023 0308 	bic.w	r3, r3, #8
 800157a:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_MODE_CONFIG, modeReg);
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	4619      	mov	r1, r3
 8001580:	2006      	movs	r0, #6
 8001582:	f7ff ff85 	bl	8001490 <MAX30100_WriteReg>
	if(_max30100_mode == MAX30100_SPO2_MODE)
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MAX30100_SetMode+0x94>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b03      	cmp	r3, #3
 800158c:	d106      	bne.n	800159c <MAX30100_SetMode+0x68>
		MAX30100_EnableInterrupt(0, 1, 0, 0);
 800158e:	2300      	movs	r3, #0
 8001590:	2200      	movs	r2, #0
 8001592:	2101      	movs	r1, #1
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff ff99 	bl	80014cc <MAX30100_EnableInterrupt>
	else if(_max30100_mode == MAX30100_HRONLY_MODE)
		MAX30100_EnableInterrupt(1, 0, 0, 0);
	else
		MAX30100_EnableInterrupt(0, 0, 0, 0);
}
 800159a:	e010      	b.n	80015be <MAX30100_SetMode+0x8a>
	else if(_max30100_mode == MAX30100_HRONLY_MODE)
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <MAX30100_SetMode+0x94>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d106      	bne.n	80015b2 <MAX30100_SetMode+0x7e>
		MAX30100_EnableInterrupt(1, 0, 0, 0);
 80015a4:	2300      	movs	r3, #0
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2001      	movs	r0, #1
 80015ac:	f7ff ff8e 	bl	80014cc <MAX30100_EnableInterrupt>
}
 80015b0:	e005      	b.n	80015be <MAX30100_SetMode+0x8a>
		MAX30100_EnableInterrupt(0, 0, 0, 0);
 80015b2:	2300      	movs	r3, #0
 80015b4:	2200      	movs	r2, #0
 80015b6:	2100      	movs	r1, #0
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff ff87 	bl	80014cc <MAX30100_EnableInterrupt>
}
 80015be:	bf00      	nop
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20000210 	.word	0x20000210

080015cc <MAX30100_SetSpO2SampleRate>:
//ok
void MAX30100_SetSpO2SampleRate(enum MAX30100_SpO2SR sr){
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
	uint8_t spo2Reg = MAX30100_ReadReg(MAX30100_SPO2_CONFIG);
 80015d6:	2007      	movs	r0, #7
 80015d8:	f7ff ff36 	bl	8001448 <MAX30100_ReadReg>
 80015dc:	4603      	mov	r3, r0
 80015de:	73fb      	strb	r3, [r7, #15]
	spo2Reg = ((sr << MAX30100_SPO2_SR) & 0x1c) | (spo2Reg & ~0x1c);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	f003 031c 	and.w	r3, r3, #28
 80015ea:	b25a      	sxtb	r2, r3
 80015ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f0:	f023 031c 	bic.w	r3, r3, #28
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	4313      	orrs	r3, r2
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2Reg);
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	4619      	mov	r1, r3
 8001600:	2007      	movs	r0, #7
 8001602:	f7ff ff45 	bl	8001490 <MAX30100_WriteReg>
}
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <MAX30100_SetLEDPulseWidth>:
//ok
void MAX30100_SetLEDPulseWidth(enum MAX30100_LEDPulseWidth pw){
 800160e:	b580      	push	{r7, lr}
 8001610:	b084      	sub	sp, #16
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	71fb      	strb	r3, [r7, #7]
	uint8_t spo2Reg = MAX30100_ReadReg(MAX30100_SPO2_CONFIG);
 8001618:	2007      	movs	r0, #7
 800161a:	f7ff ff15 	bl	8001448 <MAX30100_ReadReg>
 800161e:	4603      	mov	r3, r0
 8001620:	73fb      	strb	r3, [r7, #15]
	spo2Reg = ((pw << MAX30100_LED_PW) & 0x03) | (spo2Reg & ~0x03);
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	b25a      	sxtb	r2, r3
 800162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001630:	f023 0303 	bic.w	r3, r3, #3
 8001634:	b25b      	sxtb	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b25b      	sxtb	r3, r3
 800163a:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2Reg);
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	4619      	mov	r1, r3
 8001640:	2007      	movs	r0, #7
 8001642:	f7ff ff25 	bl	8001490 <MAX30100_WriteReg>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <MAX30100_SetLEDCurrent>:
void MAX30100_SetLEDCurrent(enum MAX30100_LEDCurrent redpa, enum MAX30100_LEDCurrent irpa){
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	460a      	mov	r2, r1
 800165a:	71fb      	strb	r3, [r7, #7]
 800165c:	4613      	mov	r3, r2
 800165e:	71bb      	strb	r3, [r7, #6]
	_max30100_red_current = redpa;
 8001660:	4a0a      	ldr	r2, [pc, #40]	; (800168c <MAX30100_SetLEDCurrent+0x3c>)
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	7013      	strb	r3, [r2, #0]
	_max30100_ir_current = irpa;
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <MAX30100_SetLEDCurrent+0x40>)
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	7013      	strb	r3, [r2, #0]
	MAX30100_WriteReg(MAX30100_LED_CONFIG, (redpa << MAX30100_LED_RED_PA) | irpa);
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	b25a      	sxtb	r2, r3
 8001672:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001676:	4313      	orrs	r3, r2
 8001678:	b25b      	sxtb	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	4619      	mov	r1, r3
 800167e:	2009      	movs	r0, #9
 8001680:	f7ff ff06 	bl	8001490 <MAX30100_WriteReg>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000212 	.word	0x20000212
 8001690:	200001e6 	.word	0x200001e6

08001694 <MAX30100_ClearFIFO>:

void MAX30100_ClearFIFO(void){
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	MAX30100_WriteReg(MAX30100_FIFO_WR_PTR, 0x00);
 8001698:	2100      	movs	r1, #0
 800169a:	2002      	movs	r0, #2
 800169c:	f7ff fef8 	bl	8001490 <MAX30100_WriteReg>
	MAX30100_WriteReg(MAX30100_FIFO_RD_PTR, 0x00);
 80016a0:	2100      	movs	r1, #0
 80016a2:	2004      	movs	r0, #4
 80016a4:	f7ff fef4 	bl	8001490 <MAX30100_WriteReg>
	MAX30100_WriteReg(MAX30100_OVF_COUNTER, 0x00);
 80016a8:	2100      	movs	r1, #0
 80016aa:	2003      	movs	r0, #3
 80016ac:	f7ff fef0 	bl	8001490 <MAX30100_WriteReg>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <MAX30100_ReadFIFO>:

void MAX30100_ReadFIFO(void){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b094      	sub	sp, #80	; 0x50
 80016b8:	af02      	add	r7, sp, #8
	//uint8_t fifo_wr_ptr = MAX30100_ReadReg(MAX30100_FIFO_WR_PTR);
	//uint8_t fifo_rd_ptr = MAX30100_ReadReg(MAX30100_FIFO_RD_PTR);
	uint8_t num_sample = 64;//(fifo_wr_ptr - fifo_rd_ptr) * 4;
 80016ba:	2340      	movs	r3, #64	; 0x40
 80016bc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	uint8_t fifo_data[64] = { 0 };
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2240      	movs	r2, #64	; 0x40
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f003 faf0 	bl	8004cac <memset>
	uint8_t reg = MAX30100_FIFO_DATA;
 80016cc:	2305      	movs	r3, #5
 80016ce:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, &reg, 1, MAX30100_TIMEOUT);
 80016d0:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <MAX30100_ReadFIFO+0xf4>)
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	1cfa      	adds	r2, r7, #3
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	2301      	movs	r3, #1
 80016de:	21ae      	movs	r1, #174	; 0xae
 80016e0:	f001 f846 	bl	8002770 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_max30100_ui2c, MAX30100_I2C_ADDR, fifo_data, num_sample, MAX30100_TIMEOUT);
 80016e4:	4b30      	ldr	r3, [pc, #192]	; (80017a8 <MAX30100_ReadFIFO+0xf4>)
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80016ec:	b299      	uxth	r1, r3
 80016ee:	1d3a      	adds	r2, r7, #4
 80016f0:	f04f 33ff 	mov.w	r3, #4294967295
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	460b      	mov	r3, r1
 80016f8:	21ae      	movs	r1, #174	; 0xae
 80016fa:	f001 f937 	bl	800296c <HAL_I2C_Master_Receive>
	for(uint8_t i = 0; i < num_sample; i += 4){
 80016fe:	2300      	movs	r3, #0
 8001700:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001704:	e045      	b.n	8001792 <MAX30100_ReadFIFO+0xde>
		_max30100_ir_sample[i / 4] = ((fifo_data[i] << 8) | fifo_data[i + 1])/100;
 8001706:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800170a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800170e:	4413      	add	r3, r2
 8001710:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800171a:	3201      	adds	r2, #1
 800171c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001720:	440a      	add	r2, r1
 8001722:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8001726:	4313      	orrs	r3, r2
 8001728:	4a20      	ldr	r2, [pc, #128]	; (80017ac <MAX30100_ReadFIFO+0xf8>)
 800172a:	fb82 1203 	smull	r1, r2, r2, r3
 800172e:	1152      	asrs	r2, r2, #5
 8001730:	17db      	asrs	r3, r3, #31
 8001732:	1ad1      	subs	r1, r2, r3
 8001734:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	b2db      	uxtb	r3, r3
 800173c:	461a      	mov	r2, r3
 800173e:	b289      	uxth	r1, r1
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <MAX30100_ReadFIFO+0xfc>)
 8001742:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		_max30100_red_sample[i / 4] = ((fifo_data[i + 2] << 8) | fifo_data[i + 3])/100;
 8001746:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800174a:	3302      	adds	r3, #2
 800174c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001750:	4413      	add	r3, r2
 8001752:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800175c:	3203      	adds	r2, #3
 800175e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8001762:	440a      	add	r2, r1
 8001764:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8001768:	4313      	orrs	r3, r2
 800176a:	4a10      	ldr	r2, [pc, #64]	; (80017ac <MAX30100_ReadFIFO+0xf8>)
 800176c:	fb82 1203 	smull	r1, r2, r2, r3
 8001770:	1152      	asrs	r2, r2, #5
 8001772:	17db      	asrs	r3, r3, #31
 8001774:	1ad1      	subs	r1, r2, r3
 8001776:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	b2db      	uxtb	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	b289      	uxth	r1, r1
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MAX30100_ReadFIFO+0x100>)
 8001784:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i = 0; i < num_sample; i += 4){
 8001788:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800178c:	3304      	adds	r3, #4
 800178e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001792:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001796:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800179a:	429a      	cmp	r2, r3
 800179c:	d3b3      	bcc.n	8001706 <MAX30100_ReadFIFO+0x52>
	}

}
 800179e:	bf00      	nop
 80017a0:	3748      	adds	r7, #72	; 0x48
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001e8 	.word	0x200001e8
 80017ac:	51eb851f 	.word	0x51eb851f
 80017b0:	20000214 	.word	0x20000214
 80017b4:	200001ec 	.word	0x200001ec

080017b8 <MAX30100_PlotBothToUART>:
#if 0
		HAL_UART_Transmit(uuart, data, strlen(data), MAX30100_TIMEOUT);
#endif
	}
}
void MAX30100_PlotBothToUART( uint16_t *samplesRed, uint16_t *samplesIr, uint8_t sampleSize){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	; 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	4613      	mov	r3, r2
 80017c4:	71fb      	strb	r3, [r7, #7]
	char data[20];
	for(uint8_t i = 0; i< sampleSize; i++){
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017cc:	e021      	b.n	8001812 <MAX30100_PlotBothToUART+0x5a>
		sprintf(data, "red:%d\tir:%d\n", samplesRed[i]/100, samplesIr[i]/100);
 80017ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	4413      	add	r3, r2
 80017d8:	881b      	ldrh	r3, [r3, #0]
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <MAX30100_PlotBothToUART+0x6c>)
 80017dc:	fba2 2303 	umull	r2, r3, r2, r3
 80017e0:	095b      	lsrs	r3, r3, #5
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4619      	mov	r1, r3
 80017e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	4413      	add	r3, r2
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	4a0c      	ldr	r2, [pc, #48]	; (8001824 <MAX30100_PlotBothToUART+0x6c>)
 80017f4:	fba2 2303 	umull	r2, r3, r2, r3
 80017f8:	095b      	lsrs	r3, r3, #5
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	f107 0010 	add.w	r0, r7, #16
 8001800:	460a      	mov	r2, r1
 8001802:	4909      	ldr	r1, [pc, #36]	; (8001828 <MAX30100_PlotBothToUART+0x70>)
 8001804:	f003 fa5a 	bl	8004cbc <siprintf>
	for(uint8_t i = 0; i< sampleSize; i++){
 8001808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800180c:	3301      	adds	r3, #1
 800180e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001812:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	429a      	cmp	r2, r3
 800181a:	d3d8      	bcc.n	80017ce <MAX30100_PlotBothToUART+0x16>
#if 0
		HAL_UART_Transmit(uuart, data, strlen(data), MAX30100_TIMEOUT);
#endif
	}
}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	51eb851f 	.word	0x51eb851f
 8001828:	08005500 	.word	0x08005500

0800182c <MAX30100_Stop>:
	sprintf(data, "temp:%d.%d\n", tempInt, tempFrac);
	HAL_UART_Transmit(uuart, data, strlen(data), MAX30100_TIMEOUT);
}

#endif
void MAX30100_Stop(void){
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	_max30100_mode = MAX30100_IDLE_MODE;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MAX30100_Stop+0x20>)
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
	MAX30100_SetLEDCurrent(MAX30100_LEDCURRENT_0_0, MAX30100_LEDCURRENT_0_0);
 8001836:	2100      	movs	r1, #0
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff ff09 	bl	8001650 <MAX30100_SetLEDCurrent>
	MAX30100_WriteReg(MAX30100_INTERRUPT_ENB, 0x00);
 800183e:	2100      	movs	r1, #0
 8001840:	2001      	movs	r0, #1
 8001842:	f7ff fe25 	bl	8001490 <MAX30100_WriteReg>
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000210 	.word	0x20000210

08001850 <CRC8_Calc>:
    0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef,
    0xfa, 0xfd, 0xf4, 0xf3
};

uint8_t CRC8_Calc (uint8_t *p, uint8_t len) {
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
        uint16_t i;
        uint16_t crc = 0x0;
 800185c:	2300      	movs	r3, #0
 800185e:	81fb      	strh	r3, [r7, #14]

        while (len--) {
 8001860:	e015      	b.n	800188e <CRC8_Calc+0x3e>
                i = (crc ^ *p++) & 0xFF;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b29a      	uxth	r2, r3
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	4053      	eors	r3, r2
 8001870:	b29b      	uxth	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	81bb      	strh	r3, [r7, #12]
                crc = (crc_table[i] ^ (crc << 8)) & 0xFF;
 8001876:	89bb      	ldrh	r3, [r7, #12]
 8001878:	4a0b      	ldr	r2, [pc, #44]	; (80018a8 <CRC8_Calc+0x58>)
 800187a:	5cd3      	ldrb	r3, [r2, r3]
 800187c:	b21a      	sxth	r2, r3
 800187e:	89fb      	ldrh	r3, [r7, #14]
 8001880:	021b      	lsls	r3, r3, #8
 8001882:	b21b      	sxth	r3, r3
 8001884:	4053      	eors	r3, r2
 8001886:	b21b      	sxth	r3, r3
 8001888:	b29b      	uxth	r3, r3
 800188a:	b2db      	uxtb	r3, r3
 800188c:	81fb      	strh	r3, [r7, #14]
        while (len--) {
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	70fa      	strb	r2, [r7, #3]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e4      	bne.n	8001862 <CRC8_Calc+0x12>
        }

        return crc & 0xFF;
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	b2db      	uxtb	r3, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	08005524 	.word	0x08005524

080018ac <MLX90614_WriteReg>:

void MLX90614_WriteReg(uint8_t devAddr, uint8_t regAddr, uint16_t data) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
 80018b6:	460b      	mov	r3, r1
 80018b8:	71bb      	strb	r3, [r7, #6]
 80018ba:	4613      	mov	r3, r2
 80018bc:	80bb      	strh	r3, [r7, #4]

	uint8_t i2cdata[4], temp[4];

	temp[0] = (devAddr << 1);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	723b      	strb	r3, [r7, #8]
	temp[1] = regAddr;
 80018c6:	79bb      	ldrb	r3, [r7, #6]
 80018c8:	727b      	strb	r3, [r7, #9]

	temp[2] = 0x00;
 80018ca:	2300      	movs	r3, #0
 80018cc:	72bb      	strb	r3, [r7, #10]
	temp[3] = 0x00;
 80018ce:	2300      	movs	r3, #0
 80018d0:	72fb      	strb	r3, [r7, #11]

	// For a write word command, in the crc8 calculus, you have to include [SA_W, Command, LSB, MSB]

	i2cdata[0] = temp[1]; //EEPROM-address
 80018d2:	7a7b      	ldrb	r3, [r7, #9]
 80018d4:	733b      	strb	r3, [r7, #12]
	i2cdata[1] = temp[2]; //Delete-Byte, low
 80018d6:	7abb      	ldrb	r3, [r7, #10]
 80018d8:	737b      	strb	r3, [r7, #13]
	i2cdata[2] = temp[3]; //Delete-Byte, high
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	73bb      	strb	r3, [r7, #14]
	i2cdata[3] = CRC8_Calc(temp, 4); //CRC8-checksum calculation: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	2104      	movs	r1, #4
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ffb3 	bl	8001850 <CRC8_Calc>
 80018ea:	4603      	mov	r3, r0
 80018ec:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, (devAddr << 1), i2cdata, 4, 0xFFFF);
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	b299      	uxth	r1, r3
 80018f6:	f107 020c 	add.w	r2, r7, #12
 80018fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2304      	movs	r3, #4
 8001902:	4818      	ldr	r0, [pc, #96]	; (8001964 <MLX90614_WriteReg+0xb8>)
 8001904:	f000 ff34 	bl	8002770 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001908:	200a      	movs	r0, #10
 800190a:	f000 fae1 	bl	8001ed0 <HAL_Delay>

//	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_W, devAddr, i2cdata[0], (i2cdata[1] <<8 | i2cdata[2]), i2cdata[3], 0x00);

	temp[2] = data & 0xFF; //Getting LSB first
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	72bb      	strb	r3, [r7, #10]
	temp[3] = data >> 8;   //Getting MSB after
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	b29b      	uxth	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	72fb      	strb	r3, [r7, #11]

	i2cdata[0] = temp[1]; //EEPROM-address
 800191e:	7a7b      	ldrb	r3, [r7, #9]
 8001920:	733b      	strb	r3, [r7, #12]
	i2cdata[1] = temp[2]; //Delete-Byte, low
 8001922:	7abb      	ldrb	r3, [r7, #10]
 8001924:	737b      	strb	r3, [r7, #13]
	i2cdata[2] = temp[3]; //Delete-Byte, high
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	73bb      	strb	r3, [r7, #14]
	i2cdata[3] = CRC8_Calc(temp, 4); //CRC8-checksum calculation: http://www.sunshine2k.de/coding/javascript/crc/crc_js.html
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	2104      	movs	r1, #4
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff ff8d 	bl	8001850 <CRC8_Calc>
 8001936:	4603      	mov	r3, r0
 8001938:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, (devAddr << 1), i2cdata, 4, 0xFFFF);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	b29b      	uxth	r3, r3
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	b299      	uxth	r1, r3
 8001942:	f107 020c 	add.w	r2, r7, #12
 8001946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2304      	movs	r3, #4
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MLX90614_WriteReg+0xb8>)
 8001950:	f000 ff0e 	bl	8002770 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001954:	200a      	movs	r0, #10
 8001956:	f000 fabb 	bl	8001ed0 <HAL_Delay>
//	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_W, devAddr, i2cdata[0], data, i2cdata[3], 0x00);
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	200000b8 	.word	0x200000b8

08001968 <MLX90614_ReadReg>:
uint16_t MLX90614_ReadReg(uint8_t devAddr, uint8_t regAddr, uint8_t dbg_lvl) {
 8001968:	b580      	push	{r7, lr}
 800196a:	b08a      	sub	sp, #40	; 0x28
 800196c:	af04      	add	r7, sp, #16
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
 8001972:	460b      	mov	r3, r1
 8001974:	71bb      	strb	r3, [r7, #6]
 8001976:	4613      	mov	r3, r2
 8001978:	717b      	strb	r3, [r7, #5]
	uint16_t data;
	uint8_t in_buff[3], crc_buff[5], crc;

	HAL_I2C_Mem_Read(&hi2c1, (devAddr<<1), regAddr, 1, in_buff, 3, 100);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	b29b      	uxth	r3, r3
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	b299      	uxth	r1, r3
 8001982:	79bb      	ldrb	r3, [r7, #6]
 8001984:	b29a      	uxth	r2, r3
 8001986:	2364      	movs	r3, #100	; 0x64
 8001988:	9302      	str	r3, [sp, #8]
 800198a:	2303      	movs	r3, #3
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	4817      	ldr	r0, [pc, #92]	; (80019f4 <MLX90614_ReadReg+0x8c>)
 8001998:	f001 fa42 	bl	8002e20 <HAL_I2C_Mem_Read>

	// For a read word command, in the crc8 calculus, you have to include [SA_W, Command, SA_R, LSB, MSB]
	crc_buff[0] = (devAddr<<1);
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	723b      	strb	r3, [r7, #8]
	crc_buff[1] = regAddr;
 80019a4:	79bb      	ldrb	r3, [r7, #6]
 80019a6:	727b      	strb	r3, [r7, #9]
	crc_buff[2] = (devAddr<<1) + 1;
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	72bb      	strb	r3, [r7, #10]
	crc_buff[3] = in_buff[0];
 80019b4:	7c3b      	ldrb	r3, [r7, #16]
 80019b6:	72fb      	strb	r3, [r7, #11]
	crc_buff[4] = in_buff[1];
 80019b8:	7c7b      	ldrb	r3, [r7, #17]
 80019ba:	733b      	strb	r3, [r7, #12]
	crc = CRC8_Calc(crc_buff, 5);
 80019bc:	f107 0308 	add.w	r3, r7, #8
 80019c0:	2105      	movs	r1, #5
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff ff44 	bl	8001850 <CRC8_Calc>
 80019c8:	4603      	mov	r3, r0
 80019ca:	757b      	strb	r3, [r7, #21]

	data = (in_buff[1] <<8 | in_buff[0]);
 80019cc:	7c7b      	ldrb	r3, [r7, #17]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	b21a      	sxth	r2, r3
 80019d2:	7c3b      	ldrb	r3, [r7, #16]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	4313      	orrs	r3, r2
 80019d8:	b21b      	sxth	r3, r3
 80019da:	82fb      	strh	r3, [r7, #22]

	//TODO: implement CRC8 check on data received
	if (crc != in_buff[2]) {
 80019dc:	7cbb      	ldrb	r3, [r7, #18]
 80019de:	7d7a      	ldrb	r2, [r7, #21]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <MLX90614_ReadReg+0x80>
		data = 0x0000;
 80019e4:	2300      	movs	r3, #0
 80019e6:	82fb      	strh	r3, [r7, #22]
	}
//	if(dbg_lvl == MLX90614_DBG_ON)	MLX90614_SendDebugMsg(MLX90614_DBG_MSG_R, devAddr, regAddr, data, in_buff[2], crc);

	//HAL_Delay(1);
	return data;
 80019e8:	8afb      	ldrh	r3, [r7, #22]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200000b8 	.word	0x200000b8

080019f8 <MLX90614_ReadTemp>:
float MLX90614_ReadTemp(uint8_t devAddr, uint8_t regAddr) {
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	460a      	mov	r2, r1
 8001a02:	71fb      	strb	r3, [r7, #7]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71bb      	strb	r3, [r7, #6]
	float temp;
	uint16_t data;

	data = MLX90614_ReadReg(devAddr, regAddr, MLX90614_DBG_OFF);
 8001a08:	79b9      	ldrb	r1, [r7, #6]
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff ffaa 	bl	8001968 <MLX90614_ReadReg>
 8001a14:	4603      	mov	r3, r0
 8001a16:	81fb      	strh	r3, [r7, #14]
	temp = data*0.02 - 273.15;
 8001a18:	89fb      	ldrh	r3, [r7, #14]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fcea 	bl	80003f4 <__aeabi_i2d>
 8001a20:	a30d      	add	r3, pc, #52	; (adr r3, 8001a58 <MLX90614_ReadTemp+0x60>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fd4f 	bl	80004c8 <__aeabi_dmul>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	4618      	mov	r0, r3
 8001a30:	4621      	mov	r1, r4
 8001a32:	a30b      	add	r3, pc, #44	; (adr r3, 8001a60 <MLX90614_ReadTemp+0x68>)
 8001a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a38:	f7fe fb8e 	bl	8000158 <__aeabi_dsub>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	460c      	mov	r4, r1
 8001a40:	4618      	mov	r0, r3
 8001a42:	4621      	mov	r1, r4
 8001a44:	f7fe ff52 	bl	80008ec <__aeabi_d2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60bb      	str	r3, [r7, #8]

	return temp;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd90      	pop	{r4, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	47ae147b 	.word	0x47ae147b
 8001a5c:	3f947ae1 	.word	0x3f947ae1
 8001a60:	66666666 	.word	0x66666666
 8001a64:	40711266 	.word	0x40711266

08001a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6193      	str	r3, [r2, #24]
 8001a7a:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	61d3      	str	r3, [r2, #28]
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_MspInit+0x5c>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <HAL_MspInit+0x60>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_MspInit+0x60>)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40010000 	.word	0x40010000

08001acc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a2b      	ldr	r2, [pc, #172]	; (8001b94 <HAL_I2C_MspInit+0xc8>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d124      	bne.n	8001b36 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4b2a      	ldr	r3, [pc, #168]	; (8001b98 <HAL_I2C_MspInit+0xcc>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a29      	ldr	r2, [pc, #164]	; (8001b98 <HAL_I2C_MspInit+0xcc>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_I2C_MspInit+0xcc>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b04:	23c0      	movs	r3, #192	; 0xc0
 8001b06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b08:	2312      	movs	r3, #18
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b10:	f107 0318 	add.w	r3, r7, #24
 8001b14:	4619      	mov	r1, r3
 8001b16:	4821      	ldr	r0, [pc, #132]	; (8001b9c <HAL_I2C_MspInit+0xd0>)
 8001b18:	f000 fb80 	bl	800221c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	; (8001b98 <HAL_I2C_MspInit+0xcc>)
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_I2C_MspInit+0xcc>)
 8001b22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b26:	61d3      	str	r3, [r2, #28]
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_I2C_MspInit+0xcc>)
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b34:	e029      	b.n	8001b8a <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_I2C_MspInit+0xd4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d124      	bne.n	8001b8a <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <HAL_I2C_MspInit+0xcc>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <HAL_I2C_MspInit+0xcc>)
 8001b46:	f043 0308 	orr.w	r3, r3, #8
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_I2C_MspInit+0xcc>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5e:	2312      	movs	r3, #18
 8001b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b62:	2303      	movs	r3, #3
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b66:	f107 0318 	add.w	r3, r7, #24
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	480b      	ldr	r0, [pc, #44]	; (8001b9c <HAL_I2C_MspInit+0xd0>)
 8001b6e:	f000 fb55 	bl	800221c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <HAL_I2C_MspInit+0xcc>)
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	4a08      	ldr	r2, [pc, #32]	; (8001b98 <HAL_I2C_MspInit+0xcc>)
 8001b78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b7c:	61d3      	str	r3, [r2, #28]
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_I2C_MspInit+0xcc>)
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	; 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40005400 	.word	0x40005400
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40010c00 	.word	0x40010c00
 8001ba0:	40005800 	.word	0x40005800

08001ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a3f      	ldr	r2, [pc, #252]	; (8001cbc <HAL_UART_MspInit+0x118>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d13a      	bne.n	8001c3a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bc4:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <HAL_UART_MspInit+0x11c>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a3d      	ldr	r2, [pc, #244]	; (8001cc0 <HAL_UART_MspInit+0x11c>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_UART_MspInit+0x11c>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <HAL_UART_MspInit+0x11c>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a37      	ldr	r2, [pc, #220]	; (8001cc0 <HAL_UART_MspInit+0x11c>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b35      	ldr	r3, [pc, #212]	; (8001cc0 <HAL_UART_MspInit+0x11c>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	613b      	str	r3, [r7, #16]
 8001bf2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c02:	f107 0318 	add.w	r3, r7, #24
 8001c06:	4619      	mov	r1, r3
 8001c08:	482e      	ldr	r0, [pc, #184]	; (8001cc4 <HAL_UART_MspInit+0x120>)
 8001c0a:	f000 fb07 	bl	800221c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 0318 	add.w	r3, r7, #24
 8001c20:	4619      	mov	r1, r3
 8001c22:	4828      	ldr	r0, [pc, #160]	; (8001cc4 <HAL_UART_MspInit+0x120>)
 8001c24:	f000 fafa 	bl	800221c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2025      	movs	r0, #37	; 0x25
 8001c2e:	f000 fa48 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c32:	2025      	movs	r0, #37	; 0x25
 8001c34:	f000 fa61 	bl	80020fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c38:	e03c      	b.n	8001cb4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <HAL_UART_MspInit+0x124>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d137      	bne.n	8001cb4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_UART_MspInit+0x11c>)
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <HAL_UART_MspInit+0x11c>)
 8001c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4e:	61d3      	str	r3, [r2, #28]
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_UART_MspInit+0x11c>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_UART_MspInit+0x11c>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_UART_MspInit+0x11c>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_UART_MspInit+0x11c>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c74:	2304      	movs	r3, #4
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4619      	mov	r1, r3
 8001c86:	480f      	ldr	r0, [pc, #60]	; (8001cc4 <HAL_UART_MspInit+0x120>)
 8001c88:	f000 fac8 	bl	800221c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c98:	f107 0318 	add.w	r3, r7, #24
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <HAL_UART_MspInit+0x120>)
 8001ca0:	f000 fabc 	bl	800221c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	2026      	movs	r0, #38	; 0x26
 8001caa:	f000 fa0a 	bl	80020c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cae:	2026      	movs	r0, #38	; 0x26
 8001cb0:	f000 fa23 	bl	80020fa <HAL_NVIC_EnableIRQ>
}
 8001cb4:	bf00      	nop
 8001cb6:	3728      	adds	r7, #40	; 0x28
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40010800 	.word	0x40010800
 8001cc8:	40004400 	.word	0x40004400

08001ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <HardFault_Handler+0x4>

08001cde <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce2:	e7fe      	b.n	8001ce2 <MemManage_Handler+0x4>

08001ce4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <BusFault_Handler+0x4>

08001cea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cee:	e7fe      	b.n	8001cee <UsageFault_Handler+0x4>

08001cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d18:	f000 f8be 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <USART1_IRQHandler+0x10>)
 8001d26:	f002 fc8b 	bl	8004640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000160 	.word	0x20000160

08001d34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <USART2_IRQHandler+0x10>)
 8001d3a:	f002 fc81 	bl	8004640 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200001a4 	.word	0x200001a4

08001d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d50:	4a14      	ldr	r2, [pc, #80]	; (8001da4 <_sbrk+0x5c>)
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <_sbrk+0x60>)
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <_sbrk+0x64>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <_sbrk+0x68>)
 8001d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d78:	f002 ff6e 	bl	8004c58 <__errno>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	230c      	movs	r3, #12
 8001d80:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d82:	f04f 33ff 	mov.w	r3, #4294967295
 8001d86:	e009      	b.n	8001d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <_sbrk+0x64>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	4a05      	ldr	r2, [pc, #20]	; (8001dac <_sbrk+0x64>)
 8001d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20005000 	.word	0x20005000
 8001da8:	00000400 	.word	0x00000400
 8001dac:	200000ac 	.word	0x200000ac
 8001db0:	20000240 	.word	0x20000240

08001db4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */

  movs r1, #0
 8001dc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001dc2:	e003      	b.n	8001dcc <LoopCopyDataInit>

08001dc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001dc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001dc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001dca:	3104      	adds	r1, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001dcc:	480a      	ldr	r0, [pc, #40]	; (8001df8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001dd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001dd4:	d3f6      	bcc.n	8001dc4 <CopyDataInit>
  ldr r2, =_sbss
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001dd8:	e002      	b.n	8001de0 <LoopFillZerobss>

08001dda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001dda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001ddc:	f842 3b04 	str.w	r3, [r2], #4

08001de0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001de2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001de4:	d3f9      	bcc.n	8001dda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001de6:	f7ff ffe5 	bl	8001db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dea:	f002 ff3b 	bl	8004c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dee:	f7fe fded 	bl	80009cc <main>
  bx lr
 8001df2:	4770      	bx	lr
  ldr r3, =_sidata
 8001df4:	08005678 	.word	0x08005678
  ldr r0, =_sdata
 8001df8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001dfc:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8001e00:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8001e04:	2000023c 	.word	0x2000023c

08001e08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC1_2_IRQHandler>
	...

08001e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_Init+0x28>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a07      	ldr	r2, [pc, #28]	; (8001e34 <HAL_Init+0x28>)
 8001e16:	f043 0310 	orr.w	r3, r3, #16
 8001e1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	f000 f945 	bl	80020ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f000 f808 	bl	8001e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e28:	f7ff fe1e 	bl	8001a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40022000 	.word	0x40022000

08001e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e40:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_InitTick+0x54>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_InitTick+0x58>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f95d 	bl	8002116 <HAL_SYSTICK_Config>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00e      	b.n	8001e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b0f      	cmp	r3, #15
 8001e6a:	d80a      	bhi.n	8001e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f000 f925 	bl	80020c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e78:	4a06      	ldr	r2, [pc, #24]	; (8001e94 <HAL_InitTick+0x5c>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	2000000c 	.word	0x2000000c
 8001e90:	20000014 	.word	0x20000014
 8001e94:	20000010 	.word	0x20000010

08001e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <HAL_IncTick+0x1c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_IncTick+0x20>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a03      	ldr	r2, [pc, #12]	; (8001eb8 <HAL_IncTick+0x20>)
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr
 8001eb4:	20000014 	.word	0x20000014
 8001eb8:	20000234 	.word	0x20000234

08001ebc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <HAL_GetTick+0x10>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000234 	.word	0x20000234

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_GetTick>
 8001edc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_Delay+0x40>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ef6:	bf00      	nop
 8001ef8:	f7ff ffe0 	bl	8001ebc <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000014 	.word	0x20000014

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0b      	blt.n	8001fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 021f 	and.w	r2, r3, #31
 8001f90:	4906      	ldr	r1, [pc, #24]	; (8001fac <__NVIC_EnableIRQ+0x34>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2001      	movs	r0, #1
 8001f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	e000e100 	.word	0xe000e100

08001fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db0a      	blt.n	8001fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	490c      	ldr	r1, [pc, #48]	; (8001ffc <__NVIC_SetPriority+0x4c>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd8:	e00a      	b.n	8001ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <__NVIC_SetPriority+0x50>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	761a      	strb	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f1c3 0307 	rsb	r3, r3, #7
 800201e:	2b04      	cmp	r3, #4
 8002020:	bf28      	it	cs
 8002022:	2304      	movcs	r3, #4
 8002024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3304      	adds	r3, #4
 800202a:	2b06      	cmp	r3, #6
 800202c:	d902      	bls.n	8002034 <NVIC_EncodePriority+0x30>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3b03      	subs	r3, #3
 8002032:	e000      	b.n	8002036 <NVIC_EncodePriority+0x32>
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	f04f 32ff 	mov.w	r2, #4294967295
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800204c:	f04f 31ff 	mov.w	r1, #4294967295
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43d9      	mvns	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	4313      	orrs	r3, r2
         );
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3b01      	subs	r3, #1
 8002074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002078:	d301      	bcc.n	800207e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207a:	2301      	movs	r3, #1
 800207c:	e00f      	b.n	800209e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207e:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <SysTick_Config+0x40>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002086:	210f      	movs	r1, #15
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	f7ff ff90 	bl	8001fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <SysTick_Config+0x40>)
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002096:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <SysTick_Config+0x40>)
 8002098:	2207      	movs	r2, #7
 800209a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	e000e010 	.word	0xe000e010

080020ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ff2d 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b086      	sub	sp, #24
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	4603      	mov	r3, r0
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d4:	f7ff ff42 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 80020d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f7ff ff90 	bl	8002004 <NVIC_EncodePriority>
 80020e4:	4602      	mov	r2, r0
 80020e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff ff5f 	bl	8001fb0 <__NVIC_SetPriority>
}
 80020f2:	bf00      	nop
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff ff35 	bl	8001f78 <__NVIC_EnableIRQ>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff ffa2 	bl	8002068 <SysTick_Config>
 8002124:	4603      	mov	r3, r0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002142:	2b02      	cmp	r3, #2
 8002144:	d005      	beq.n	8002152 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
 8002150:	e051      	b.n	80021f6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f022 020e 	bic.w	r2, r2, #14
 8002160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a22      	ldr	r2, [pc, #136]	; (8002200 <HAL_DMA_Abort_IT+0xd0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d029      	beq.n	80021d0 <HAL_DMA_Abort_IT+0xa0>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a20      	ldr	r2, [pc, #128]	; (8002204 <HAL_DMA_Abort_IT+0xd4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d022      	beq.n	80021cc <HAL_DMA_Abort_IT+0x9c>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a1f      	ldr	r2, [pc, #124]	; (8002208 <HAL_DMA_Abort_IT+0xd8>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d01a      	beq.n	80021c6 <HAL_DMA_Abort_IT+0x96>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a1d      	ldr	r2, [pc, #116]	; (800220c <HAL_DMA_Abort_IT+0xdc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d012      	beq.n	80021c0 <HAL_DMA_Abort_IT+0x90>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <HAL_DMA_Abort_IT+0xe0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d00a      	beq.n	80021ba <HAL_DMA_Abort_IT+0x8a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1a      	ldr	r2, [pc, #104]	; (8002214 <HAL_DMA_Abort_IT+0xe4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d102      	bne.n	80021b4 <HAL_DMA_Abort_IT+0x84>
 80021ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021b2:	e00e      	b.n	80021d2 <HAL_DMA_Abort_IT+0xa2>
 80021b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021b8:	e00b      	b.n	80021d2 <HAL_DMA_Abort_IT+0xa2>
 80021ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021be:	e008      	b.n	80021d2 <HAL_DMA_Abort_IT+0xa2>
 80021c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c4:	e005      	b.n	80021d2 <HAL_DMA_Abort_IT+0xa2>
 80021c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ca:	e002      	b.n	80021d2 <HAL_DMA_Abort_IT+0xa2>
 80021cc:	2310      	movs	r3, #16
 80021ce:	e000      	b.n	80021d2 <HAL_DMA_Abort_IT+0xa2>
 80021d0:	2301      	movs	r3, #1
 80021d2:	4a11      	ldr	r2, [pc, #68]	; (8002218 <HAL_DMA_Abort_IT+0xe8>)
 80021d4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	4798      	blx	r3
    } 
  }
  return status;
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40020008 	.word	0x40020008
 8002204:	4002001c 	.word	0x4002001c
 8002208:	40020030 	.word	0x40020030
 800220c:	40020044 	.word	0x40020044
 8002210:	40020058 	.word	0x40020058
 8002214:	4002006c 	.word	0x4002006c
 8002218:	40020000 	.word	0x40020000

0800221c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800221c:	b480      	push	{r7}
 800221e:	b08b      	sub	sp, #44	; 0x2c
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002226:	2300      	movs	r3, #0
 8002228:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800222e:	e127      	b.n	8002480 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002230:	2201      	movs	r2, #1
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	4013      	ands	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	429a      	cmp	r2, r3
 800224a:	f040 8116 	bne.w	800247a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b12      	cmp	r3, #18
 8002254:	d034      	beq.n	80022c0 <HAL_GPIO_Init+0xa4>
 8002256:	2b12      	cmp	r3, #18
 8002258:	d80d      	bhi.n	8002276 <HAL_GPIO_Init+0x5a>
 800225a:	2b02      	cmp	r3, #2
 800225c:	d02b      	beq.n	80022b6 <HAL_GPIO_Init+0x9a>
 800225e:	2b02      	cmp	r3, #2
 8002260:	d804      	bhi.n	800226c <HAL_GPIO_Init+0x50>
 8002262:	2b00      	cmp	r3, #0
 8002264:	d031      	beq.n	80022ca <HAL_GPIO_Init+0xae>
 8002266:	2b01      	cmp	r3, #1
 8002268:	d01c      	beq.n	80022a4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800226a:	e048      	b.n	80022fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800226c:	2b03      	cmp	r3, #3
 800226e:	d043      	beq.n	80022f8 <HAL_GPIO_Init+0xdc>
 8002270:	2b11      	cmp	r3, #17
 8002272:	d01b      	beq.n	80022ac <HAL_GPIO_Init+0x90>
          break;
 8002274:	e043      	b.n	80022fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002276:	4a89      	ldr	r2, [pc, #548]	; (800249c <HAL_GPIO_Init+0x280>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d026      	beq.n	80022ca <HAL_GPIO_Init+0xae>
 800227c:	4a87      	ldr	r2, [pc, #540]	; (800249c <HAL_GPIO_Init+0x280>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d806      	bhi.n	8002290 <HAL_GPIO_Init+0x74>
 8002282:	4a87      	ldr	r2, [pc, #540]	; (80024a0 <HAL_GPIO_Init+0x284>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d020      	beq.n	80022ca <HAL_GPIO_Init+0xae>
 8002288:	4a86      	ldr	r2, [pc, #536]	; (80024a4 <HAL_GPIO_Init+0x288>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01d      	beq.n	80022ca <HAL_GPIO_Init+0xae>
          break;
 800228e:	e036      	b.n	80022fe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002290:	4a85      	ldr	r2, [pc, #532]	; (80024a8 <HAL_GPIO_Init+0x28c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d019      	beq.n	80022ca <HAL_GPIO_Init+0xae>
 8002296:	4a85      	ldr	r2, [pc, #532]	; (80024ac <HAL_GPIO_Init+0x290>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d016      	beq.n	80022ca <HAL_GPIO_Init+0xae>
 800229c:	4a84      	ldr	r2, [pc, #528]	; (80024b0 <HAL_GPIO_Init+0x294>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_GPIO_Init+0xae>
          break;
 80022a2:	e02c      	b.n	80022fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	623b      	str	r3, [r7, #32]
          break;
 80022aa:	e028      	b.n	80022fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	3304      	adds	r3, #4
 80022b2:	623b      	str	r3, [r7, #32]
          break;
 80022b4:	e023      	b.n	80022fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	3308      	adds	r3, #8
 80022bc:	623b      	str	r3, [r7, #32]
          break;
 80022be:	e01e      	b.n	80022fe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	330c      	adds	r3, #12
 80022c6:	623b      	str	r3, [r7, #32]
          break;
 80022c8:	e019      	b.n	80022fe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d102      	bne.n	80022d8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022d2:	2304      	movs	r3, #4
 80022d4:	623b      	str	r3, [r7, #32]
          break;
 80022d6:	e012      	b.n	80022fe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022e0:	2308      	movs	r3, #8
 80022e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	611a      	str	r2, [r3, #16]
          break;
 80022ea:	e008      	b.n	80022fe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022ec:	2308      	movs	r3, #8
 80022ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	615a      	str	r2, [r3, #20]
          break;
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022f8:	2300      	movs	r3, #0
 80022fa:	623b      	str	r3, [r7, #32]
          break;
 80022fc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2bff      	cmp	r3, #255	; 0xff
 8002302:	d801      	bhi.n	8002308 <HAL_GPIO_Init+0xec>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	e001      	b.n	800230c <HAL_GPIO_Init+0xf0>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2bff      	cmp	r3, #255	; 0xff
 8002312:	d802      	bhi.n	800231a <HAL_GPIO_Init+0xfe>
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	e002      	b.n	8002320 <HAL_GPIO_Init+0x104>
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	3b08      	subs	r3, #8
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	210f      	movs	r1, #15
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	401a      	ands	r2, r3
 8002332:	6a39      	ldr	r1, [r7, #32]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	431a      	orrs	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 8096 	beq.w	800247a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800234e:	4b59      	ldr	r3, [pc, #356]	; (80024b4 <HAL_GPIO_Init+0x298>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	4a58      	ldr	r2, [pc, #352]	; (80024b4 <HAL_GPIO_Init+0x298>)
 8002354:	f043 0301 	orr.w	r3, r3, #1
 8002358:	6193      	str	r3, [r2, #24]
 800235a:	4b56      	ldr	r3, [pc, #344]	; (80024b4 <HAL_GPIO_Init+0x298>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	60bb      	str	r3, [r7, #8]
 8002364:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002366:	4a54      	ldr	r2, [pc, #336]	; (80024b8 <HAL_GPIO_Init+0x29c>)
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	3302      	adds	r3, #2
 800236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002372:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	220f      	movs	r2, #15
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4013      	ands	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4b      	ldr	r2, [pc, #300]	; (80024bc <HAL_GPIO_Init+0x2a0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d013      	beq.n	80023ba <HAL_GPIO_Init+0x19e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4a      	ldr	r2, [pc, #296]	; (80024c0 <HAL_GPIO_Init+0x2a4>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d00d      	beq.n	80023b6 <HAL_GPIO_Init+0x19a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a49      	ldr	r2, [pc, #292]	; (80024c4 <HAL_GPIO_Init+0x2a8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d007      	beq.n	80023b2 <HAL_GPIO_Init+0x196>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a48      	ldr	r2, [pc, #288]	; (80024c8 <HAL_GPIO_Init+0x2ac>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_GPIO_Init+0x192>
 80023aa:	2303      	movs	r3, #3
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x1a0>
 80023ae:	2304      	movs	r3, #4
 80023b0:	e004      	b.n	80023bc <HAL_GPIO_Init+0x1a0>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_Init+0x1a0>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_GPIO_Init+0x1a0>
 80023ba:	2300      	movs	r3, #0
 80023bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023be:	f002 0203 	and.w	r2, r2, #3
 80023c2:	0092      	lsls	r2, r2, #2
 80023c4:	4093      	lsls	r3, r2
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023cc:	493a      	ldr	r1, [pc, #232]	; (80024b8 <HAL_GPIO_Init+0x29c>)
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d006      	beq.n	80023f4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023e6:	4b39      	ldr	r3, [pc, #228]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4938      	ldr	r1, [pc, #224]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]
 80023f2:	e006      	b.n	8002402 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023f4:	4b35      	ldr	r3, [pc, #212]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	4933      	ldr	r1, [pc, #204]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 80023fe:	4013      	ands	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800240e:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	492e      	ldr	r1, [pc, #184]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
 800241a:	e006      	b.n	800242a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800241c:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	43db      	mvns	r3, r3
 8002424:	4929      	ldr	r1, [pc, #164]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 8002426:	4013      	ands	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002436:	4b25      	ldr	r3, [pc, #148]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 8002438:	689a      	ldr	r2, [r3, #8]
 800243a:	4924      	ldr	r1, [pc, #144]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
 8002442:	e006      	b.n	8002452 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002444:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	43db      	mvns	r3, r3
 800244c:	491f      	ldr	r1, [pc, #124]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 800244e:	4013      	ands	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d006      	beq.n	800246c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800245e:	4b1b      	ldr	r3, [pc, #108]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	491a      	ldr	r1, [pc, #104]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	60cb      	str	r3, [r1, #12]
 800246a:	e006      	b.n	800247a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800246c:	4b17      	ldr	r3, [pc, #92]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	43db      	mvns	r3, r3
 8002474:	4915      	ldr	r1, [pc, #84]	; (80024cc <HAL_GPIO_Init+0x2b0>)
 8002476:	4013      	ands	r3, r2
 8002478:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	3301      	adds	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002486:	fa22 f303 	lsr.w	r3, r2, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	f47f aed0 	bne.w	8002230 <HAL_GPIO_Init+0x14>
  }
}
 8002490:	bf00      	nop
 8002492:	372c      	adds	r7, #44	; 0x2c
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	10210000 	.word	0x10210000
 80024a0:	10110000 	.word	0x10110000
 80024a4:	10120000 	.word	0x10120000
 80024a8:	10310000 	.word	0x10310000
 80024ac:	10320000 	.word	0x10320000
 80024b0:	10220000 	.word	0x10220000
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40010800 	.word	0x40010800
 80024c0:	40010c00 	.word	0x40010c00
 80024c4:	40011000 	.word	0x40011000
 80024c8:	40011400 	.word	0x40011400
 80024cc:	40010400 	.word	0x40010400

080024d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	807b      	strh	r3, [r7, #2]
 80024dc:	4613      	mov	r3, r2
 80024de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e0:	787b      	ldrb	r3, [r7, #1]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e6:	887a      	ldrh	r2, [r7, #2]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024ec:	e003      	b.n	80024f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024ee:	887b      	ldrh	r3, [r7, #2]
 80024f0:	041a      	lsls	r2, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	611a      	str	r2, [r3, #16]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e11f      	b.n	8002752 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d106      	bne.n	800252c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff fad0 	bl	8001acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2224      	movs	r2, #36	; 0x24
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0201 	bic.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002552:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002562:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002564:	f001 fea8 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8002568:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4a7b      	ldr	r2, [pc, #492]	; (800275c <HAL_I2C_Init+0x25c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d807      	bhi.n	8002584 <HAL_I2C_Init+0x84>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4a7a      	ldr	r2, [pc, #488]	; (8002760 <HAL_I2C_Init+0x260>)
 8002578:	4293      	cmp	r3, r2
 800257a:	bf94      	ite	ls
 800257c:	2301      	movls	r3, #1
 800257e:	2300      	movhi	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	e006      	b.n	8002592 <HAL_I2C_Init+0x92>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4a77      	ldr	r2, [pc, #476]	; (8002764 <HAL_I2C_Init+0x264>)
 8002588:	4293      	cmp	r3, r2
 800258a:	bf94      	ite	ls
 800258c:	2301      	movls	r3, #1
 800258e:	2300      	movhi	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0db      	b.n	8002752 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	4a72      	ldr	r2, [pc, #456]	; (8002768 <HAL_I2C_Init+0x268>)
 800259e:	fba2 2303 	umull	r2, r3, r2, r3
 80025a2:	0c9b      	lsrs	r3, r3, #18
 80025a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	4a64      	ldr	r2, [pc, #400]	; (800275c <HAL_I2C_Init+0x25c>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d802      	bhi.n	80025d4 <HAL_I2C_Init+0xd4>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	3301      	adds	r3, #1
 80025d2:	e009      	b.n	80025e8 <HAL_I2C_Init+0xe8>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025da:	fb02 f303 	mul.w	r3, r2, r3
 80025de:	4a63      	ldr	r2, [pc, #396]	; (800276c <HAL_I2C_Init+0x26c>)
 80025e0:	fba2 2303 	umull	r2, r3, r2, r3
 80025e4:	099b      	lsrs	r3, r3, #6
 80025e6:	3301      	adds	r3, #1
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	430b      	orrs	r3, r1
 80025ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4956      	ldr	r1, [pc, #344]	; (800275c <HAL_I2C_Init+0x25c>)
 8002604:	428b      	cmp	r3, r1
 8002606:	d80d      	bhi.n	8002624 <HAL_I2C_Init+0x124>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1e59      	subs	r1, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	fbb1 f3f3 	udiv	r3, r1, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	2b04      	cmp	r3, #4
 800261e:	bf38      	it	cc
 8002620:	2304      	movcc	r3, #4
 8002622:	e04f      	b.n	80026c4 <HAL_I2C_Init+0x1c4>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d111      	bne.n	8002650 <HAL_I2C_Init+0x150>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	440b      	add	r3, r1
 800263a:	fbb0 f3f3 	udiv	r3, r0, r3
 800263e:	3301      	adds	r3, #1
 8002640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e012      	b.n	8002676 <HAL_I2C_Init+0x176>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	1e58      	subs	r0, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	0099      	lsls	r1, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	fbb0 f3f3 	udiv	r3, r0, r3
 8002666:	3301      	adds	r3, #1
 8002668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Init+0x17e>
 800267a:	2301      	movs	r3, #1
 800267c:	e022      	b.n	80026c4 <HAL_I2C_Init+0x1c4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10e      	bne.n	80026a4 <HAL_I2C_Init+0x1a4>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1e58      	subs	r0, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6859      	ldr	r1, [r3, #4]
 800268e:	460b      	mov	r3, r1
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	440b      	add	r3, r1
 8002694:	fbb0 f3f3 	udiv	r3, r0, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026a2:	e00f      	b.n	80026c4 <HAL_I2C_Init+0x1c4>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	0099      	lsls	r1, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ba:	3301      	adds	r3, #1
 80026bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	6809      	ldr	r1, [r1, #0]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69da      	ldr	r2, [r3, #28]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6911      	ldr	r1, [r2, #16]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68d2      	ldr	r2, [r2, #12]
 80026fe:	4311      	orrs	r1, r2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6812      	ldr	r2, [r2, #0]
 8002704:	430b      	orrs	r3, r1
 8002706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f042 0201 	orr.w	r2, r2, #1
 8002732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	000186a0 	.word	0x000186a0
 8002760:	001e847f 	.word	0x001e847f
 8002764:	003d08ff 	.word	0x003d08ff
 8002768:	431bde83 	.word	0x431bde83
 800276c:	10624dd3 	.word	0x10624dd3

08002770 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	607a      	str	r2, [r7, #4]
 800277a:	461a      	mov	r2, r3
 800277c:	460b      	mov	r3, r1
 800277e:	817b      	strh	r3, [r7, #10]
 8002780:	4613      	mov	r3, r2
 8002782:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff fb9a 	bl	8001ebc <HAL_GetTick>
 8002788:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b20      	cmp	r3, #32
 8002794:	f040 80e0 	bne.w	8002958 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2319      	movs	r3, #25
 800279e:	2201      	movs	r2, #1
 80027a0:	4970      	ldr	r1, [pc, #448]	; (8002964 <HAL_I2C_Master_Transmit+0x1f4>)
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 ffd6 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	e0d3      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_I2C_Master_Transmit+0x50>
 80027bc:	2302      	movs	r3, #2
 80027be:	e0cc      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d007      	beq.n	80027e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f042 0201 	orr.w	r2, r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2221      	movs	r2, #33	; 0x21
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2210      	movs	r2, #16
 8002802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	893a      	ldrh	r2, [r7, #8]
 8002816:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4a50      	ldr	r2, [pc, #320]	; (8002968 <HAL_I2C_Master_Transmit+0x1f8>)
 8002826:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002828:	8979      	ldrh	r1, [r7, #10]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	6a3a      	ldr	r2, [r7, #32]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fd58 	bl	80032e4 <I2C_MasterRequestWrite>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e08d      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002854:	e066      	b.n	8002924 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	6a39      	ldr	r1, [r7, #32]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f001 f850 	bl	8003900 <I2C_WaitOnTXEFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	2b04      	cmp	r3, #4
 800286c:	d107      	bne.n	800287e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06b      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	781a      	ldrb	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b04      	cmp	r3, #4
 80028be:	d11b      	bne.n	80028f8 <HAL_I2C_Master_Transmit+0x188>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d017      	beq.n	80028f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	6a39      	ldr	r1, [r7, #32]
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f001 f840 	bl	8003982 <I2C_WaitOnBTFFlagUntilTimeout>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00d      	beq.n	8002924 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	2b04      	cmp	r3, #4
 800290e:	d107      	bne.n	8002920 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e01a      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	2b00      	cmp	r3, #0
 800292a:	d194      	bne.n	8002856 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	e000      	b.n	800295a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002958:	2302      	movs	r3, #2
  }
}
 800295a:	4618      	mov	r0, r3
 800295c:	3718      	adds	r7, #24
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	00100002 	.word	0x00100002
 8002968:	ffff0000 	.word	0xffff0000

0800296c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af02      	add	r7, sp, #8
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	607a      	str	r2, [r7, #4]
 8002976:	461a      	mov	r2, r3
 8002978:	460b      	mov	r3, r1
 800297a:	817b      	strh	r3, [r7, #10]
 800297c:	4613      	mov	r3, r2
 800297e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002984:	f7ff fa9a 	bl	8001ebc <HAL_GetTick>
 8002988:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b20      	cmp	r3, #32
 8002994:	f040 8238 	bne.w	8002e08 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	2319      	movs	r3, #25
 800299e:	2201      	movs	r2, #1
 80029a0:	497e      	ldr	r1, [pc, #504]	; (8002b9c <HAL_I2C_Master_Receive+0x230>)
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fed6 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80029ae:	2302      	movs	r3, #2
 80029b0:	e22b      	b.n	8002e0a <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_I2C_Master_Receive+0x54>
 80029bc:	2302      	movs	r3, #2
 80029be:	e224      	b.n	8002e0a <HAL_I2C_Master_Receive+0x49e>
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d007      	beq.n	80029e6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2222      	movs	r2, #34	; 0x22
 80029fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2210      	movs	r2, #16
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	893a      	ldrh	r2, [r7, #8]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4a5e      	ldr	r2, [pc, #376]	; (8002ba0 <HAL_I2C_Master_Receive+0x234>)
 8002a26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a28:	8979      	ldrh	r1, [r7, #10]
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fcda 	bl	80033e8 <I2C_MasterRequestRead>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e1e5      	b.n	8002e0a <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d113      	bne.n	8002a6e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	e1b9      	b.n	8002de2 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d11d      	bne.n	8002ab2 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a84:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a86:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	61bb      	str	r3, [r7, #24]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002aae:	b662      	cpsie	i
 8002ab0:	e197      	b.n	8002de2 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d11d      	bne.n	8002af6 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002aca:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002acc:	2300      	movs	r3, #0
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002af2:	b662      	cpsie	i
 8002af4:	e175      	b.n	8002de2 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b06:	2300      	movs	r3, #0
 8002b08:	613b      	str	r3, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b1c:	e161      	b.n	8002de2 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	f200 811a 	bhi.w	8002d5c <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d123      	bne.n	8002b78 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 ff65 	bl	8003a04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e162      	b.n	8002e0a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	b2d2      	uxtb	r2, r2
 8002b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b76:	e134      	b.n	8002de2 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d150      	bne.n	8002c22 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	9300      	str	r3, [sp, #0]
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	2200      	movs	r2, #0
 8002b88:	4906      	ldr	r1, [pc, #24]	; (8002ba4 <HAL_I2C_Master_Receive+0x238>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 fde2 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e137      	b.n	8002e0a <HAL_I2C_Master_Receive+0x49e>
 8002b9a:	bf00      	nop
 8002b9c:	00100002 	.word	0x00100002
 8002ba0:	ffff0000 	.word	0xffff0000
 8002ba4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bec:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf8:	b2d2      	uxtb	r2, r2
 8002bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c20:	e0df      	b.n	8002de2 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	2200      	movs	r2, #0
 8002c2a:	497a      	ldr	r1, [pc, #488]	; (8002e14 <HAL_I2C_Master_Receive+0x4a8>)
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fd91 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0e6      	b.n	8002e0a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c4c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c80:	4b65      	ldr	r3, [pc, #404]	; (8002e18 <HAL_I2C_Master_Receive+0x4ac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	08db      	lsrs	r3, r3, #3
 8002c86:	4a65      	ldr	r2, [pc, #404]	; (8002e1c <HAL_I2C_Master_Receive+0x4b0>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	0a1a      	lsrs	r2, r3, #8
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00da      	lsls	r2, r3, #3
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d117      	bne.n	8002cd6 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002cc8:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e099      	b.n	8002e0a <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b04      	cmp	r3, #4
 8002ce2:	d1da      	bne.n	8002c9a <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691a      	ldr	r2, [r3, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d26:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d5a:	e042      	b.n	8002de2 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 fe4f 	bl	8003a04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e04c      	b.n	8002e0a <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b04      	cmp	r3, #4
 8002dae:	d118      	bne.n	8002de2 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f47f ae99 	bne.w	8002b1e <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e000      	b.n	8002e0a <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	00010004 	.word	0x00010004
 8002e18:	2000000c 	.word	0x2000000c
 8002e1c:	14f8b589 	.word	0x14f8b589

08002e20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	; 0x30
 8002e24:	af02      	add	r7, sp, #8
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	4608      	mov	r0, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4603      	mov	r3, r0
 8002e30:	817b      	strh	r3, [r7, #10]
 8002e32:	460b      	mov	r3, r1
 8002e34:	813b      	strh	r3, [r7, #8]
 8002e36:	4613      	mov	r3, r2
 8002e38:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e3e:	f7ff f83d 	bl	8001ebc <HAL_GetTick>
 8002e42:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	f040 823d 	bne.w	80032cc <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	2319      	movs	r3, #25
 8002e58:	2201      	movs	r2, #1
 8002e5a:	4981      	ldr	r1, [pc, #516]	; (8003060 <HAL_I2C_Mem_Read+0x240>)
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fc79 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d001      	beq.n	8002e6c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e230      	b.n	80032ce <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_I2C_Mem_Read+0x5a>
 8002e76:	2302      	movs	r3, #2
 8002e78:	e229      	b.n	80032ce <HAL_I2C_Mem_Read+0x4ae>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d007      	beq.n	8002ea0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2222      	movs	r2, #34	; 0x22
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2240      	movs	r2, #64	; 0x40
 8002ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a61      	ldr	r2, [pc, #388]	; (8003064 <HAL_I2C_Mem_Read+0x244>)
 8002ee0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ee2:	88f8      	ldrh	r0, [r7, #6]
 8002ee4:	893a      	ldrh	r2, [r7, #8]
 8002ee6:	8979      	ldrh	r1, [r7, #10]
 8002ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fb46 	bl	8003584 <I2C_RequestMemoryRead>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e1e5      	b.n	80032ce <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d113      	bne.n	8002f32 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	61fb      	str	r3, [r7, #28]
 8002f1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e1b9      	b.n	80032a6 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d11d      	bne.n	8002f76 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f4a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f72:	b662      	cpsie	i
 8002f74:	e197      	b.n	80032a6 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d11d      	bne.n	8002fba <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f8e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002fb6:	b662      	cpsie	i
 8002fb8:	e175      	b.n	80032a6 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fc8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002fe0:	e161      	b.n	80032a6 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	f200 811a 	bhi.w	8003220 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d123      	bne.n	800303c <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ff6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fd03 	bl	8003a04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e162      	b.n	80032ce <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	691a      	ldr	r2, [r3, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	1c5a      	adds	r2, r3, #1
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003030:	b29b      	uxth	r3, r3
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	855a      	strh	r2, [r3, #42]	; 0x2a
 800303a:	e134      	b.n	80032a6 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003040:	2b02      	cmp	r3, #2
 8003042:	d150      	bne.n	80030e6 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304a:	2200      	movs	r2, #0
 800304c:	4906      	ldr	r1, [pc, #24]	; (8003068 <HAL_I2C_Mem_Read+0x248>)
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fb80 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e137      	b.n	80032ce <HAL_I2C_Mem_Read+0x4ae>
 800305e:	bf00      	nop
 8003060:	00100002 	.word	0x00100002
 8003064:	ffff0000 	.word	0xffff0000
 8003068:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800306c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800307c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030b0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ce:	3b01      	subs	r3, #1
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030da:	b29b      	uxth	r3, r3
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030e4:	e0df      	b.n	80032a6 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ec:	2200      	movs	r2, #0
 80030ee:	497a      	ldr	r1, [pc, #488]	; (80032d8 <HAL_I2C_Mem_Read+0x4b8>)
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 fb2f 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0e6      	b.n	80032ce <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003110:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313a:	b29b      	uxth	r3, r3
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003144:	4b65      	ldr	r3, [pc, #404]	; (80032dc <HAL_I2C_Mem_Read+0x4bc>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	08db      	lsrs	r3, r3, #3
 800314a:	4a65      	ldr	r2, [pc, #404]	; (80032e0 <HAL_I2C_Mem_Read+0x4c0>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	0a1a      	lsrs	r2, r3, #8
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00da      	lsls	r2, r3, #3
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	3b01      	subs	r3, #1
 8003162:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d117      	bne.n	800319a <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800318c:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e099      	b.n	80032ce <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d1da      	bne.n	800315e <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031ea:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691a      	ldr	r2, [r3, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800321e:	e042      	b.n	80032a6 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003222:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fbed 	bl	8003a04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e04c      	b.n	80032ce <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	3b01      	subs	r3, #1
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	2b04      	cmp	r3, #4
 8003272:	d118      	bne.n	80032a6 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f47f ae99 	bne.w	8002fe2 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3728      	adds	r7, #40	; 0x28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	00010004 	.word	0x00010004
 80032dc:	2000000c 	.word	0x2000000c
 80032e0:	14f8b589 	.word	0x14f8b589

080032e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	460b      	mov	r3, r1
 80032f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d006      	beq.n	800330e <I2C_MasterRequestWrite+0x2a>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d003      	beq.n	800330e <I2C_MasterRequestWrite+0x2a>
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800330c:	d108      	bne.n	8003320 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e00b      	b.n	8003338 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	2b12      	cmp	r3, #18
 8003326:	d107      	bne.n	8003338 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003336:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fa05 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335e:	d103      	bne.n	8003368 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e035      	b.n	80033d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003374:	d108      	bne.n	8003388 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003384:	611a      	str	r2, [r3, #16]
 8003386:	e01b      	b.n	80033c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003388:	897b      	ldrh	r3, [r7, #10]
 800338a:	11db      	asrs	r3, r3, #7
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f003 0306 	and.w	r3, r3, #6
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f063 030f 	orn	r3, r3, #15
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	490e      	ldr	r1, [pc, #56]	; (80033e0 <I2C_MasterRequestWrite+0xfc>)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fa2b 	bl	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e010      	b.n	80033d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4907      	ldr	r1, [pc, #28]	; (80033e4 <I2C_MasterRequestWrite+0x100>)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fa1b 	bl	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	00010008 	.word	0x00010008
 80033e4:	00010002 	.word	0x00010002

080033e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af02      	add	r7, sp, #8
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	460b      	mov	r3, r1
 80033f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800340c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b08      	cmp	r3, #8
 8003412:	d006      	beq.n	8003422 <I2C_MasterRequestRead+0x3a>
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d003      	beq.n	8003422 <I2C_MasterRequestRead+0x3a>
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003420:	d108      	bne.n	8003434 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003430:	601a      	str	r2, [r3, #0]
 8003432:	e00b      	b.n	800344c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	2b11      	cmp	r3, #17
 800343a:	d107      	bne.n	800344c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800344a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f97b 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00d      	beq.n	8003480 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003472:	d103      	bne.n	800347c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800347a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e079      	b.n	8003574 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003488:	d108      	bne.n	800349c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f043 0301 	orr.w	r3, r3, #1
 8003492:	b2da      	uxtb	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	611a      	str	r2, [r3, #16]
 800349a:	e05f      	b.n	800355c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800349c:	897b      	ldrh	r3, [r7, #10]
 800349e:	11db      	asrs	r3, r3, #7
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 0306 	and.w	r3, r3, #6
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f063 030f 	orn	r3, r3, #15
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4930      	ldr	r1, [pc, #192]	; (800357c <I2C_MasterRequestRead+0x194>)
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f9a1 	bl	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e054      	b.n	8003574 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034ca:	897b      	ldrh	r3, [r7, #10]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4929      	ldr	r1, [pc, #164]	; (8003580 <I2C_MasterRequestRead+0x198>)
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f991 	bl	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e044      	b.n	8003574 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800350e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f919 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00d      	beq.n	8003544 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003536:	d103      	bne.n	8003540 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e017      	b.n	8003574 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003544:	897b      	ldrh	r3, [r7, #10]
 8003546:	11db      	asrs	r3, r3, #7
 8003548:	b2db      	uxtb	r3, r3
 800354a:	f003 0306 	and.w	r3, r3, #6
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f063 030e 	orn	r3, r3, #14
 8003554:	b2da      	uxtb	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	4907      	ldr	r1, [pc, #28]	; (8003580 <I2C_MasterRequestRead+0x198>)
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f94d 	bl	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3718      	adds	r7, #24
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	00010008 	.word	0x00010008
 8003580:	00010002 	.word	0x00010002

08003584 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	4608      	mov	r0, r1
 800358e:	4611      	mov	r1, r2
 8003590:	461a      	mov	r2, r3
 8003592:	4603      	mov	r3, r0
 8003594:	817b      	strh	r3, [r7, #10]
 8003596:	460b      	mov	r3, r1
 8003598:	813b      	strh	r3, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f8c2 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00d      	beq.n	80035f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e4:	d103      	bne.n	80035ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e0aa      	b.n	8003748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035f2:	897b      	ldrh	r3, [r7, #10]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003600:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	6a3a      	ldr	r2, [r7, #32]
 8003606:	4952      	ldr	r1, [pc, #328]	; (8003750 <I2C_RequestMemoryRead+0x1cc>)
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f8fa 	bl	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e097      	b.n	8003748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	6a39      	ldr	r1, [r7, #32]
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f964 	bl	8003900 <I2C_WaitOnTXEFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b04      	cmp	r3, #4
 8003644:	d107      	bne.n	8003656 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003654:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e076      	b.n	8003748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800365a:	88fb      	ldrh	r3, [r7, #6]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d105      	bne.n	800366c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003660:	893b      	ldrh	r3, [r7, #8]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	611a      	str	r2, [r3, #16]
 800366a:	e021      	b.n	80036b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800366c:	893b      	ldrh	r3, [r7, #8]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	b29b      	uxth	r3, r3
 8003672:	b2da      	uxtb	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367c:	6a39      	ldr	r1, [r7, #32]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f93e 	bl	8003900 <I2C_WaitOnTXEFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	2b04      	cmp	r3, #4
 8003690:	d107      	bne.n	80036a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e050      	b.n	8003748 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036a6:	893b      	ldrh	r3, [r7, #8]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b2:	6a39      	ldr	r1, [r7, #32]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f923 	bl	8003900 <I2C_WaitOnTXEFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00d      	beq.n	80036dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d107      	bne.n	80036d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e035      	b.n	8003748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	6a3b      	ldr	r3, [r7, #32]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f82b 	bl	8003754 <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00d      	beq.n	8003720 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003712:	d103      	bne.n	800371c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800371a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e013      	b.n	8003748 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003720:	897b      	ldrh	r3, [r7, #10]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	b2da      	uxtb	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	6a3a      	ldr	r2, [r7, #32]
 8003734:	4906      	ldr	r1, [pc, #24]	; (8003750 <I2C_RequestMemoryRead+0x1cc>)
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f863 	bl	8003802 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e000      	b.n	8003748 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	00010002 	.word	0x00010002

08003754 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	603b      	str	r3, [r7, #0]
 8003760:	4613      	mov	r3, r2
 8003762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003764:	e025      	b.n	80037b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d021      	beq.n	80037b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376e:	f7fe fba5 	bl	8001ebc <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	429a      	cmp	r2, r3
 800377c:	d302      	bcc.n	8003784 <I2C_WaitOnFlagUntilTimeout+0x30>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d116      	bne.n	80037b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f043 0220 	orr.w	r2, r3, #32
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e023      	b.n	80037fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d10d      	bne.n	80037d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	43da      	mvns	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4013      	ands	r3, r2
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bf0c      	ite	eq
 80037ce:	2301      	moveq	r3, #1
 80037d0:	2300      	movne	r3, #0
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	e00c      	b.n	80037f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	43da      	mvns	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	4013      	ands	r3, r2
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bf0c      	ite	eq
 80037ea:	2301      	moveq	r3, #1
 80037ec:	2300      	movne	r3, #0
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d0b6      	beq.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
 800380e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003810:	e051      	b.n	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003820:	d123      	bne.n	800386a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003830:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800383a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f043 0204 	orr.w	r2, r3, #4
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e046      	b.n	80038f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d021      	beq.n	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7fe fb23 	bl	8001ebc <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d116      	bne.n	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f043 0220 	orr.w	r2, r3, #32
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e020      	b.n	80038f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	0c1b      	lsrs	r3, r3, #16
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d10c      	bne.n	80038da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	43da      	mvns	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4013      	ands	r3, r2
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	bf14      	ite	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	2300      	moveq	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	e00b      	b.n	80038f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	43da      	mvns	r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4013      	ands	r3, r2
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	bf14      	ite	ne
 80038ec:	2301      	movne	r3, #1
 80038ee:	2300      	moveq	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d18d      	bne.n	8003812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800390c:	e02d      	b.n	800396a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f8ce 	bl	8003ab0 <I2C_IsAcknowledgeFailed>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d001      	beq.n	800391e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e02d      	b.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d021      	beq.n	800396a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fe fac9 	bl	8001ebc <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d116      	bne.n	800396a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e007      	b.n	800397a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003974:	2b80      	cmp	r3, #128	; 0x80
 8003976:	d1ca      	bne.n	800390e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800398e:	e02d      	b.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f88d 	bl	8003ab0 <I2C_IsAcknowledgeFailed>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e02d      	b.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a6:	d021      	beq.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a8:	f7fe fa88 	bl	8001ebc <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d302      	bcc.n	80039be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d116      	bne.n	80039ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	f043 0220 	orr.w	r2, r3, #32
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e007      	b.n	80039fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d1ca      	bne.n	8003990 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a10:	e042      	b.n	8003a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d119      	bne.n	8003a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0210 	mvn.w	r2, #16
 8003a28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e029      	b.n	8003aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a54:	f7fe fa32 	bl	8001ebc <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d302      	bcc.n	8003a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d116      	bne.n	8003a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f043 0220 	orr.w	r2, r3, #32
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e007      	b.n	8003aa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa2:	2b40      	cmp	r3, #64	; 0x40
 8003aa4:	d1b5      	bne.n	8003a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac6:	d11b      	bne.n	8003b00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ad0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	f043 0204 	orr.w	r2, r3, #4
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e26c      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8087 	beq.w	8003c3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b2c:	4b92      	ldr	r3, [pc, #584]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	d00c      	beq.n	8003b52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b38:	4b8f      	ldr	r3, [pc, #572]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d112      	bne.n	8003b6a <HAL_RCC_OscConfig+0x5e>
 8003b44:	4b8c      	ldr	r3, [pc, #560]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d10b      	bne.n	8003b6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b52:	4b89      	ldr	r3, [pc, #548]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d06c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x12c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d168      	bne.n	8003c38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e246      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b72:	d106      	bne.n	8003b82 <HAL_RCC_OscConfig+0x76>
 8003b74:	4b80      	ldr	r3, [pc, #512]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a7f      	ldr	r2, [pc, #508]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7e:	6013      	str	r3, [r2, #0]
 8003b80:	e02e      	b.n	8003be0 <HAL_RCC_OscConfig+0xd4>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x98>
 8003b8a:	4b7b      	ldr	r3, [pc, #492]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a7a      	ldr	r2, [pc, #488]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b78      	ldr	r3, [pc, #480]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a77      	ldr	r2, [pc, #476]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003b9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e01d      	b.n	8003be0 <HAL_RCC_OscConfig+0xd4>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bac:	d10c      	bne.n	8003bc8 <HAL_RCC_OscConfig+0xbc>
 8003bae:	4b72      	ldr	r3, [pc, #456]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a71      	ldr	r2, [pc, #452]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	4b6f      	ldr	r3, [pc, #444]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a6e      	ldr	r2, [pc, #440]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	e00b      	b.n	8003be0 <HAL_RCC_OscConfig+0xd4>
 8003bc8:	4b6b      	ldr	r3, [pc, #428]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a6a      	ldr	r2, [pc, #424]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	4b68      	ldr	r3, [pc, #416]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a67      	ldr	r2, [pc, #412]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fe f968 	bl	8001ebc <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fe f964 	bl	8001ebc <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e1fa      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	4b5d      	ldr	r3, [pc, #372]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xe4>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c10:	f7fe f954 	bl	8001ebc <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fe f950 	bl	8001ebc <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e1e6      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x10c>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d063      	beq.n	8003d0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c46:	4b4c      	ldr	r3, [pc, #304]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00b      	beq.n	8003c6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c52:	4b49      	ldr	r3, [pc, #292]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d11c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x18c>
 8003c5e:	4b46      	ldr	r3, [pc, #280]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d116      	bne.n	8003c98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c6a:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_RCC_OscConfig+0x176>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e1ba      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c82:	4b3d      	ldr	r3, [pc, #244]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4939      	ldr	r1, [pc, #228]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c96:	e03a      	b.n	8003d0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d020      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca0:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <HAL_RCC_OscConfig+0x270>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca6:	f7fe f909 	bl	8001ebc <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cae:	f7fe f905 	bl	8001ebc <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e19b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc0:	4b2d      	ldr	r3, [pc, #180]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0f0      	beq.n	8003cae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ccc:	4b2a      	ldr	r3, [pc, #168]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	00db      	lsls	r3, r3, #3
 8003cda:	4927      	ldr	r1, [pc, #156]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	600b      	str	r3, [r1, #0]
 8003ce0:	e015      	b.n	8003d0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ce2:	4b26      	ldr	r3, [pc, #152]	; (8003d7c <HAL_RCC_OscConfig+0x270>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fe f8e8 	bl	8001ebc <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf0:	f7fe f8e4 	bl	8001ebc <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e17a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d02:	4b1d      	ldr	r3, [pc, #116]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d03a      	beq.n	8003d90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d019      	beq.n	8003d56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d22:	4b17      	ldr	r3, [pc, #92]	; (8003d80 <HAL_RCC_OscConfig+0x274>)
 8003d24:	2201      	movs	r2, #1
 8003d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d28:	f7fe f8c8 	bl	8001ebc <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fe f8c4 	bl	8001ebc <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e15a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d42:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <HAL_RCC_OscConfig+0x26c>)
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f000 fada 	bl	8004308 <RCC_Delay>
 8003d54:	e01c      	b.n	8003d90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d56:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <HAL_RCC_OscConfig+0x274>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5c:	f7fe f8ae 	bl	8001ebc <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d62:	e00f      	b.n	8003d84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d64:	f7fe f8aa 	bl	8001ebc <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d908      	bls.n	8003d84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e140      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	42420000 	.word	0x42420000
 8003d80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	4b9e      	ldr	r3, [pc, #632]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e9      	bne.n	8003d64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80a6 	beq.w	8003eea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da2:	4b97      	ldr	r3, [pc, #604]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10d      	bne.n	8003dca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	4b94      	ldr	r3, [pc, #592]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4a93      	ldr	r2, [pc, #588]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db8:	61d3      	str	r3, [r2, #28]
 8003dba:	4b91      	ldr	r3, [pc, #580]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dca:	4b8e      	ldr	r3, [pc, #568]	; (8004004 <HAL_RCC_OscConfig+0x4f8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d118      	bne.n	8003e08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd6:	4b8b      	ldr	r3, [pc, #556]	; (8004004 <HAL_RCC_OscConfig+0x4f8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a8a      	ldr	r2, [pc, #552]	; (8004004 <HAL_RCC_OscConfig+0x4f8>)
 8003ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de2:	f7fe f86b 	bl	8001ebc <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dea:	f7fe f867 	bl	8001ebc <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b64      	cmp	r3, #100	; 0x64
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e0fd      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dfc:	4b81      	ldr	r3, [pc, #516]	; (8004004 <HAL_RCC_OscConfig+0x4f8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d106      	bne.n	8003e1e <HAL_RCC_OscConfig+0x312>
 8003e10:	4b7b      	ldr	r3, [pc, #492]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	4a7a      	ldr	r2, [pc, #488]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6213      	str	r3, [r2, #32]
 8003e1c:	e02d      	b.n	8003e7a <HAL_RCC_OscConfig+0x36e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10c      	bne.n	8003e40 <HAL_RCC_OscConfig+0x334>
 8003e26:	4b76      	ldr	r3, [pc, #472]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4a75      	ldr	r2, [pc, #468]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e2c:	f023 0301 	bic.w	r3, r3, #1
 8003e30:	6213      	str	r3, [r2, #32]
 8003e32:	4b73      	ldr	r3, [pc, #460]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4a72      	ldr	r2, [pc, #456]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e38:	f023 0304 	bic.w	r3, r3, #4
 8003e3c:	6213      	str	r3, [r2, #32]
 8003e3e:	e01c      	b.n	8003e7a <HAL_RCC_OscConfig+0x36e>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d10c      	bne.n	8003e62 <HAL_RCC_OscConfig+0x356>
 8003e48:	4b6d      	ldr	r3, [pc, #436]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	4a6c      	ldr	r2, [pc, #432]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e4e:	f043 0304 	orr.w	r3, r3, #4
 8003e52:	6213      	str	r3, [r2, #32]
 8003e54:	4b6a      	ldr	r3, [pc, #424]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	4a69      	ldr	r2, [pc, #420]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	6213      	str	r3, [r2, #32]
 8003e60:	e00b      	b.n	8003e7a <HAL_RCC_OscConfig+0x36e>
 8003e62:	4b67      	ldr	r3, [pc, #412]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	4a66      	ldr	r2, [pc, #408]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	6213      	str	r3, [r2, #32]
 8003e6e:	4b64      	ldr	r3, [pc, #400]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	4a63      	ldr	r2, [pc, #396]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003e74:	f023 0304 	bic.w	r3, r3, #4
 8003e78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d015      	beq.n	8003eae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e82:	f7fe f81b 	bl	8001ebc <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fe f817 	bl	8001ebc <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e0ab      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea0:	4b57      	ldr	r3, [pc, #348]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0ee      	beq.n	8003e8a <HAL_RCC_OscConfig+0x37e>
 8003eac:	e014      	b.n	8003ed8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eae:	f7fe f805 	bl	8001ebc <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb6:	f7fe f801 	bl	8001ebc <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e095      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ecc:	4b4c      	ldr	r3, [pc, #304]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ee      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d105      	bne.n	8003eea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ede:	4b48      	ldr	r3, [pc, #288]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	4a47      	ldr	r2, [pc, #284]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	69db      	ldr	r3, [r3, #28]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f000 8081 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ef4:	4b42      	ldr	r3, [pc, #264]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d061      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d146      	bne.n	8003f96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f08:	4b3f      	ldr	r3, [pc, #252]	; (8004008 <HAL_RCC_OscConfig+0x4fc>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0e:	f7fd ffd5 	bl	8001ebc <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f16:	f7fd ffd1 	bl	8001ebc <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e067      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f28:	4b35      	ldr	r3, [pc, #212]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f3c:	d108      	bne.n	8003f50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f3e:	4b30      	ldr	r3, [pc, #192]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	492d      	ldr	r1, [pc, #180]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a19      	ldr	r1, [r3, #32]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	430b      	orrs	r3, r1
 8003f62:	4927      	ldr	r1, [pc, #156]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f68:	4b27      	ldr	r3, [pc, #156]	; (8004008 <HAL_RCC_OscConfig+0x4fc>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6e:	f7fd ffa5 	bl	8001ebc <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f76:	f7fd ffa1 	bl	8001ebc <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e037      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f88:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0x46a>
 8003f94:	e02f      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f96:	4b1c      	ldr	r3, [pc, #112]	; (8004008 <HAL_RCC_OscConfig+0x4fc>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fd ff8e 	bl	8001ebc <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fd ff8a 	bl	8001ebc <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e020      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fb6:	4b12      	ldr	r3, [pc, #72]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1f0      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x498>
 8003fc2:	e018      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	69db      	ldr	r3, [r3, #28]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e013      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_OscConfig+0x4f4>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d106      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d001      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e000      	b.n	8003ff8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40021000 	.word	0x40021000
 8004004:	40007000 	.word	0x40007000
 8004008:	42420060 	.word	0x42420060

0800400c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0d0      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004020:	4b6a      	ldr	r3, [pc, #424]	; (80041cc <HAL_RCC_ClockConfig+0x1c0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d910      	bls.n	8004050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b67      	ldr	r3, [pc, #412]	; (80041cc <HAL_RCC_ClockConfig+0x1c0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 0207 	bic.w	r2, r3, #7
 8004036:	4965      	ldr	r1, [pc, #404]	; (80041cc <HAL_RCC_ClockConfig+0x1c0>)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	4313      	orrs	r3, r2
 800403c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403e:	4b63      	ldr	r3, [pc, #396]	; (80041cc <HAL_RCC_ClockConfig+0x1c0>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d001      	beq.n	8004050 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0b8      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d020      	beq.n	800409e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004068:	4b59      	ldr	r3, [pc, #356]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	4a58      	ldr	r2, [pc, #352]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 800406e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004072:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004080:	4b53      	ldr	r3, [pc, #332]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	4a52      	ldr	r2, [pc, #328]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004086:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800408a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800408c:	4b50      	ldr	r3, [pc, #320]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	494d      	ldr	r1, [pc, #308]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 800409a:	4313      	orrs	r3, r2
 800409c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d040      	beq.n	800412c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d107      	bne.n	80040c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b2:	4b47      	ldr	r3, [pc, #284]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d115      	bne.n	80040ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e07f      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ca:	4b41      	ldr	r3, [pc, #260]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e073      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040da:	4b3d      	ldr	r3, [pc, #244]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e06b      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ea:	4b39      	ldr	r3, [pc, #228]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f023 0203 	bic.w	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4936      	ldr	r1, [pc, #216]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040fc:	f7fd fede 	bl	8001ebc <HAL_GetTick>
 8004100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004102:	e00a      	b.n	800411a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004104:	f7fd feda 	bl	8001ebc <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e053      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411a:	4b2d      	ldr	r3, [pc, #180]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 020c 	and.w	r2, r3, #12
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	429a      	cmp	r2, r3
 800412a:	d1eb      	bne.n	8004104 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800412c:	4b27      	ldr	r3, [pc, #156]	; (80041cc <HAL_RCC_ClockConfig+0x1c0>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d210      	bcs.n	800415c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b24      	ldr	r3, [pc, #144]	; (80041cc <HAL_RCC_ClockConfig+0x1c0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f023 0207 	bic.w	r2, r3, #7
 8004142:	4922      	ldr	r1, [pc, #136]	; (80041cc <HAL_RCC_ClockConfig+0x1c0>)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b20      	ldr	r3, [pc, #128]	; (80041cc <HAL_RCC_ClockConfig+0x1c0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e032      	b.n	80041c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d008      	beq.n	800417a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4916      	ldr	r1, [pc, #88]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004176:	4313      	orrs	r3, r2
 8004178:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004186:	4b12      	ldr	r3, [pc, #72]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	490e      	ldr	r1, [pc, #56]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004196:	4313      	orrs	r3, r2
 8004198:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800419a:	f000 f821 	bl	80041e0 <HAL_RCC_GetSysClockFreq>
 800419e:	4601      	mov	r1, r0
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041ac:	5cd3      	ldrb	r3, [r2, r3]
 80041ae:	fa21 f303 	lsr.w	r3, r1, r3
 80041b2:	4a09      	ldr	r2, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1cc>)
 80041b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041b6:	4b09      	ldr	r3, [pc, #36]	; (80041dc <HAL_RCC_ClockConfig+0x1d0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fd fe3c 	bl	8001e38 <HAL_InitTick>

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	40022000 	.word	0x40022000
 80041d0:	40021000 	.word	0x40021000
 80041d4:	08005624 	.word	0x08005624
 80041d8:	2000000c 	.word	0x2000000c
 80041dc:	20000010 	.word	0x20000010

080041e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041e0:	b490      	push	{r4, r7}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041e6:	4b2a      	ldr	r3, [pc, #168]	; (8004290 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041e8:	1d3c      	adds	r4, r7, #4
 80041ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041f0:	4b28      	ldr	r3, [pc, #160]	; (8004294 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61fb      	str	r3, [r7, #28]
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	2300      	movs	r3, #0
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800420a:	4b23      	ldr	r3, [pc, #140]	; (8004298 <HAL_RCC_GetSysClockFreq+0xb8>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b04      	cmp	r3, #4
 8004218:	d002      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x40>
 800421a:	2b08      	cmp	r3, #8
 800421c:	d003      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0x46>
 800421e:	e02d      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004220:	4b1e      	ldr	r3, [pc, #120]	; (800429c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004222:	623b      	str	r3, [r7, #32]
      break;
 8004224:	e02d      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	0c9b      	lsrs	r3, r3, #18
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004232:	4413      	add	r3, r2
 8004234:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004238:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d013      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004244:	4b14      	ldr	r3, [pc, #80]	; (8004298 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0c5b      	lsrs	r3, r3, #17
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004252:	4413      	add	r3, r2
 8004254:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004258:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	4a0f      	ldr	r2, [pc, #60]	; (800429c <HAL_RCC_GetSysClockFreq+0xbc>)
 800425e:	fb02 f203 	mul.w	r2, r2, r3
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	fbb2 f3f3 	udiv	r3, r2, r3
 8004268:	627b      	str	r3, [r7, #36]	; 0x24
 800426a:	e004      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	4a0c      	ldr	r2, [pc, #48]	; (80042a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004270:	fb02 f303 	mul.w	r3, r2, r3
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004278:	623b      	str	r3, [r7, #32]
      break;
 800427a:	e002      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800427c:	4b07      	ldr	r3, [pc, #28]	; (800429c <HAL_RCC_GetSysClockFreq+0xbc>)
 800427e:	623b      	str	r3, [r7, #32]
      break;
 8004280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004282:	6a3b      	ldr	r3, [r7, #32]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3728      	adds	r7, #40	; 0x28
 8004288:	46bd      	mov	sp, r7
 800428a:	bc90      	pop	{r4, r7}
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	08005510 	.word	0x08005510
 8004294:	08005520 	.word	0x08005520
 8004298:	40021000 	.word	0x40021000
 800429c:	007a1200 	.word	0x007a1200
 80042a0:	003d0900 	.word	0x003d0900

080042a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a8:	4b02      	ldr	r3, [pc, #8]	; (80042b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80042aa:	681b      	ldr	r3, [r3, #0]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr
 80042b4:	2000000c 	.word	0x2000000c

080042b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042bc:	f7ff fff2 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 80042c0:	4601      	mov	r1, r0
 80042c2:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	0a1b      	lsrs	r3, r3, #8
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	4a03      	ldr	r2, [pc, #12]	; (80042dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ce:	5cd3      	ldrb	r3, [r2, r3]
 80042d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40021000 	.word	0x40021000
 80042dc:	08005634 	.word	0x08005634

080042e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042e4:	f7ff ffde 	bl	80042a4 <HAL_RCC_GetHCLKFreq>
 80042e8:	4601      	mov	r1, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	0adb      	lsrs	r3, r3, #11
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4a03      	ldr	r2, [pc, #12]	; (8004304 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042f6:	5cd3      	ldrb	r3, [r2, r3]
 80042f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40021000 	.word	0x40021000
 8004304:	08005634 	.word	0x08005634

08004308 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004310:	4b0a      	ldr	r3, [pc, #40]	; (800433c <RCC_Delay+0x34>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0a      	ldr	r2, [pc, #40]	; (8004340 <RCC_Delay+0x38>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	0a5b      	lsrs	r3, r3, #9
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004324:	bf00      	nop
  }
  while (Delay --);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1e5a      	subs	r2, r3, #1
 800432a:	60fa      	str	r2, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f9      	bne.n	8004324 <RCC_Delay+0x1c>
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	bc80      	pop	{r7}
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	2000000c 	.word	0x2000000c
 8004340:	10624dd3 	.word	0x10624dd3

08004344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e03f      	b.n	80043d6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d106      	bne.n	8004370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7fd fc1a 	bl	8001ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2224      	movs	r2, #36	; 0x24
 8004374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fbd7 	bl	8004b3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691a      	ldr	r2, [r3, #16]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800439c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3708      	adds	r7, #8
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b08a      	sub	sp, #40	; 0x28
 80043e2:	af02      	add	r7, sp, #8
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	4613      	mov	r3, r2
 80043ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b20      	cmp	r3, #32
 80043fc:	d17c      	bne.n	80044f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <HAL_UART_Transmit+0x2c>
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e075      	b.n	80044fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_UART_Transmit+0x3e>
 8004418:	2302      	movs	r3, #2
 800441a:	e06e      	b.n	80044fa <HAL_UART_Transmit+0x11c>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2221      	movs	r2, #33	; 0x21
 800442e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004432:	f7fd fd43 	bl	8001ebc <HAL_GetTick>
 8004436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	88fa      	ldrh	r2, [r7, #6]
 800443c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	88fa      	ldrh	r2, [r7, #6]
 8004442:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444c:	d108      	bne.n	8004460 <HAL_UART_Transmit+0x82>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e003      	b.n	8004468 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004464:	2300      	movs	r3, #0
 8004466:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004470:	e02a      	b.n	80044c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2200      	movs	r2, #0
 800447a:	2180      	movs	r1, #128	; 0x80
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 f9fa 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e036      	b.n	80044fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	3302      	adds	r3, #2
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	e007      	b.n	80044ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	3301      	adds	r3, #1
 80044b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1cf      	bne.n	8004472 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2200      	movs	r2, #0
 80044da:	2140      	movs	r1, #64	; 0x40
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f9ca 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e006      	b.n	80044fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e000      	b.n	80044fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b08a      	sub	sp, #40	; 0x28
 8004506:	af02      	add	r7, sp, #8
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	4613      	mov	r3, r2
 8004510:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b20      	cmp	r3, #32
 8004520:	f040 8089 	bne.w	8004636 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_UART_Receive+0x2e>
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e081      	b.n	8004638 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_UART_Receive+0x40>
 800453e:	2302      	movs	r3, #2
 8004540:	e07a      	b.n	8004638 <HAL_UART_Receive+0x136>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2222      	movs	r2, #34	; 0x22
 8004554:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004558:	f7fd fcb0 	bl	8001ebc <HAL_GetTick>
 800455c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	88fa      	ldrh	r2, [r7, #6]
 8004562:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	88fa      	ldrh	r2, [r7, #6]
 8004568:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004572:	d108      	bne.n	8004586 <HAL_UART_Receive+0x84>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d104      	bne.n	8004586 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	e003      	b.n	800458e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800458a:	2300      	movs	r3, #0
 800458c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004596:	e043      	b.n	8004620 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	2200      	movs	r2, #0
 80045a0:	2120      	movs	r1, #32
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 f967 	bl	8004876 <UART_WaitOnFlagUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e042      	b.n	8004638 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10c      	bne.n	80045d2 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	b29b      	uxth	r3, r3
 80045c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	3302      	adds	r3, #2
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	e01f      	b.n	8004612 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045da:	d007      	beq.n	80045ec <HAL_UART_Receive+0xea>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <HAL_UART_Receive+0xf8>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	701a      	strb	r2, [r3, #0]
 80045f8:	e008      	b.n	800460c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004606:	b2da      	uxtb	r2, r3
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	3301      	adds	r3, #1
 8004610:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1b6      	bne.n	8004598 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e000      	b.n	8004638 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004636:	2302      	movs	r3, #2
  }
}
 8004638:	4618      	mov	r0, r3
 800463a:	3720      	adds	r7, #32
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004660:	2300      	movs	r3, #0
 8004662:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10d      	bne.n	8004692 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	f003 0320 	and.w	r3, r3, #32
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_UART_IRQHandler+0x52>
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f9d5 	bl	8004a3a <UART_Receive_IT>
      return;
 8004690:	e0d1      	b.n	8004836 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80b0 	beq.w	80047fa <HAL_UART_IRQHandler+0x1ba>
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <HAL_UART_IRQHandler+0x70>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 80a5 	beq.w	80047fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00a      	beq.n	80046d0 <HAL_UART_IRQHandler+0x90>
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c8:	f043 0201 	orr.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_UART_IRQHandler+0xb0>
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	f043 0202 	orr.w	r2, r3, #2
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_UART_IRQHandler+0xd0>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004708:	f043 0204 	orr.w	r2, r3, #4
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00f      	beq.n	800473a <HAL_UART_IRQHandler+0xfa>
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <HAL_UART_IRQHandler+0xee>
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	f043 0208 	orr.w	r2, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d078      	beq.n	8004834 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b00      	cmp	r3, #0
 800474a:	d007      	beq.n	800475c <HAL_UART_IRQHandler+0x11c>
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	f003 0320 	and.w	r3, r3, #32
 8004752:	2b00      	cmp	r3, #0
 8004754:	d002      	beq.n	800475c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f96f 	bl	8004a3a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	bf14      	ite	ne
 800476a:	2301      	movne	r3, #1
 800476c:	2300      	moveq	r3, #0
 800476e:	b2db      	uxtb	r3, r3
 8004770:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d102      	bne.n	8004784 <HAL_UART_IRQHandler+0x144>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d031      	beq.n	80047e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f8c0 	bl	800490a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d023      	beq.n	80047e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695a      	ldr	r2, [r3, #20]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d013      	beq.n	80047d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b4:	4a21      	ldr	r2, [pc, #132]	; (800483c <HAL_UART_IRQHandler+0x1fc>)
 80047b6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fd fcb7 	bl	8002130 <HAL_DMA_Abort_IT>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d016      	beq.n	80047f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047d2:	4610      	mov	r0, r2
 80047d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d6:	e00e      	b.n	80047f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f843 	bl	8004864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047de:	e00a      	b.n	80047f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f83f 	bl	8004864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e6:	e006      	b.n	80047f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f83b 	bl	8004864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80047f4:	e01e      	b.n	8004834 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f6:	bf00      	nop
    return;
 80047f8:	e01c      	b.n	8004834 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_UART_IRQHandler+0x1d6>
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f8ac 	bl	800496c <UART_Transmit_IT>
    return;
 8004814:	e00f      	b.n	8004836 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_UART_IRQHandler+0x1f6>
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	d005      	beq.n	8004836 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f8ed 	bl	8004a0a <UART_EndTransmit_IT>
    return;
 8004830:	bf00      	nop
 8004832:	e000      	b.n	8004836 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004834:	bf00      	nop
  }
}
 8004836:	3720      	adds	r7, #32
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	08004945 	.word	0x08004945

08004840 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	bc80      	pop	{r7}
 8004850:	4770      	bx	lr

08004852 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr

08004864 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800486c:	bf00      	nop
 800486e:	370c      	adds	r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr

08004876 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	4613      	mov	r3, r2
 8004884:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004886:	e02c      	b.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d028      	beq.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004896:	f7fd fb11 	bl	8001ebc <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d21d      	bcs.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80048b4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695a      	ldr	r2, [r3, #20]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e00f      	b.n	8004902 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	4013      	ands	r3, r2
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	bf0c      	ite	eq
 80048f2:	2301      	moveq	r3, #1
 80048f4:	2300      	movne	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d0c3      	beq.n	8004888 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800490a:	b480      	push	{r7}
 800490c:	b083      	sub	sp, #12
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004920:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695a      	ldr	r2, [r3, #20]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2220      	movs	r2, #32
 8004936:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f7ff ff80 	bl	8004864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004964:	bf00      	nop
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b21      	cmp	r3, #33	; 0x21
 800497e:	d13e      	bne.n	80049fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004988:	d114      	bne.n	80049b4 <UART_Transmit_IT+0x48>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d110      	bne.n	80049b4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a1b      	ldr	r3, [r3, #32]
 80049ac:	1c9a      	adds	r2, r3, #2
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	621a      	str	r2, [r3, #32]
 80049b2:	e008      	b.n	80049c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	1c59      	adds	r1, r3, #1
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	6211      	str	r1, [r2, #32]
 80049be:	781a      	ldrb	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	4619      	mov	r1, r3
 80049d4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10f      	bne.n	80049fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68da      	ldr	r2, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80049fe:	2302      	movs	r3, #2
  }
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bc80      	pop	{r7}
 8004a08:	4770      	bx	lr

08004a0a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b082      	sub	sp, #8
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68da      	ldr	r2, [r3, #12]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a20:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff ff08 	bl	8004840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b22      	cmp	r3, #34	; 0x22
 8004a4c:	d170      	bne.n	8004b30 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a56:	d117      	bne.n	8004a88 <UART_Receive_IT+0x4e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d113      	bne.n	8004a88 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a68:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	1c9a      	adds	r2, r3, #2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	629a      	str	r2, [r3, #40]	; 0x28
 8004a86:	e026      	b.n	8004ad6 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9a:	d007      	beq.n	8004aac <UART_Receive_IT+0x72>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <UART_Receive_IT+0x80>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	701a      	strb	r2, [r3, #0]
 8004ab8:	e008      	b.n	8004acc <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	1c5a      	adds	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d120      	bne.n	8004b2c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0220 	bic.w	r2, r2, #32
 8004af8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695a      	ldr	r2, [r3, #20]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0201 	bic.w	r2, r2, #1
 8004b18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff fe95 	bl	8004852 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	e002      	b.n	8004b32 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e000      	b.n	8004b32 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8004b30:	2302      	movs	r3, #2
  }
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
	...

08004b3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689a      	ldr	r2, [r3, #8]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b76:	f023 030c 	bic.w	r3, r3, #12
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	430b      	orrs	r3, r1
 8004b82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a2c      	ldr	r2, [pc, #176]	; (8004c50 <UART_SetConfig+0x114>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d103      	bne.n	8004bac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ba4:	f7ff fb9c 	bl	80042e0 <HAL_RCC_GetPCLK2Freq>
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	e002      	b.n	8004bb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004bac:	f7ff fb84 	bl	80042b8 <HAL_RCC_GetPCLK1Freq>
 8004bb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	009a      	lsls	r2, r3, #2
 8004bbc:	441a      	add	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	4a22      	ldr	r2, [pc, #136]	; (8004c54 <UART_SetConfig+0x118>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	095b      	lsrs	r3, r3, #5
 8004bd0:	0119      	lsls	r1, r3, #4
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009a      	lsls	r2, r3, #2
 8004bdc:	441a      	add	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004be8:	4b1a      	ldr	r3, [pc, #104]	; (8004c54 <UART_SetConfig+0x118>)
 8004bea:	fba3 0302 	umull	r0, r3, r3, r2
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2064      	movs	r0, #100	; 0x64
 8004bf2:	fb00 f303 	mul.w	r3, r0, r3
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	3332      	adds	r3, #50	; 0x32
 8004bfc:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <UART_SetConfig+0x118>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c08:	4419      	add	r1, r3
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	009a      	lsls	r2, r3, #2
 8004c14:	441a      	add	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <UART_SetConfig+0x118>)
 8004c22:	fba3 0302 	umull	r0, r3, r3, r2
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	2064      	movs	r0, #100	; 0x64
 8004c2a:	fb00 f303 	mul.w	r3, r0, r3
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	3332      	adds	r3, #50	; 0x32
 8004c34:	4a07      	ldr	r2, [pc, #28]	; (8004c54 <UART_SetConfig+0x118>)
 8004c36:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3a:	095b      	lsrs	r3, r3, #5
 8004c3c:	f003 020f 	and.w	r2, r3, #15
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	440a      	add	r2, r1
 8004c46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40013800 	.word	0x40013800
 8004c54:	51eb851f 	.word	0x51eb851f

08004c58 <__errno>:
 8004c58:	4b01      	ldr	r3, [pc, #4]	; (8004c60 <__errno+0x8>)
 8004c5a:	6818      	ldr	r0, [r3, #0]
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20000018 	.word	0x20000018

08004c64 <__libc_init_array>:
 8004c64:	b570      	push	{r4, r5, r6, lr}
 8004c66:	2500      	movs	r5, #0
 8004c68:	4e0c      	ldr	r6, [pc, #48]	; (8004c9c <__libc_init_array+0x38>)
 8004c6a:	4c0d      	ldr	r4, [pc, #52]	; (8004ca0 <__libc_init_array+0x3c>)
 8004c6c:	1ba4      	subs	r4, r4, r6
 8004c6e:	10a4      	asrs	r4, r4, #2
 8004c70:	42a5      	cmp	r5, r4
 8004c72:	d109      	bne.n	8004c88 <__libc_init_array+0x24>
 8004c74:	f000 fc34 	bl	80054e0 <_init>
 8004c78:	2500      	movs	r5, #0
 8004c7a:	4e0a      	ldr	r6, [pc, #40]	; (8004ca4 <__libc_init_array+0x40>)
 8004c7c:	4c0a      	ldr	r4, [pc, #40]	; (8004ca8 <__libc_init_array+0x44>)
 8004c7e:	1ba4      	subs	r4, r4, r6
 8004c80:	10a4      	asrs	r4, r4, #2
 8004c82:	42a5      	cmp	r5, r4
 8004c84:	d105      	bne.n	8004c92 <__libc_init_array+0x2e>
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c8c:	4798      	blx	r3
 8004c8e:	3501      	adds	r5, #1
 8004c90:	e7ee      	b.n	8004c70 <__libc_init_array+0xc>
 8004c92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c96:	4798      	blx	r3
 8004c98:	3501      	adds	r5, #1
 8004c9a:	e7f2      	b.n	8004c82 <__libc_init_array+0x1e>
 8004c9c:	08005670 	.word	0x08005670
 8004ca0:	08005670 	.word	0x08005670
 8004ca4:	08005670 	.word	0x08005670
 8004ca8:	08005674 	.word	0x08005674

08004cac <memset>:
 8004cac:	4603      	mov	r3, r0
 8004cae:	4402      	add	r2, r0
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d100      	bne.n	8004cb6 <memset+0xa>
 8004cb4:	4770      	bx	lr
 8004cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cba:	e7f9      	b.n	8004cb0 <memset+0x4>

08004cbc <siprintf>:
 8004cbc:	b40e      	push	{r1, r2, r3}
 8004cbe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cc2:	b500      	push	{lr}
 8004cc4:	b09c      	sub	sp, #112	; 0x70
 8004cc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004cc8:	9002      	str	r0, [sp, #8]
 8004cca:	9006      	str	r0, [sp, #24]
 8004ccc:	9107      	str	r1, [sp, #28]
 8004cce:	9104      	str	r1, [sp, #16]
 8004cd0:	4808      	ldr	r0, [pc, #32]	; (8004cf4 <siprintf+0x38>)
 8004cd2:	4909      	ldr	r1, [pc, #36]	; (8004cf8 <siprintf+0x3c>)
 8004cd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cd8:	9105      	str	r1, [sp, #20]
 8004cda:	6800      	ldr	r0, [r0, #0]
 8004cdc:	a902      	add	r1, sp, #8
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	f000 f866 	bl	8004db0 <_svfiprintf_r>
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	9b02      	ldr	r3, [sp, #8]
 8004ce8:	701a      	strb	r2, [r3, #0]
 8004cea:	b01c      	add	sp, #112	; 0x70
 8004cec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004cf0:	b003      	add	sp, #12
 8004cf2:	4770      	bx	lr
 8004cf4:	20000018 	.word	0x20000018
 8004cf8:	ffff0208 	.word	0xffff0208

08004cfc <__ssputs_r>:
 8004cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d00:	688e      	ldr	r6, [r1, #8]
 8004d02:	4682      	mov	sl, r0
 8004d04:	429e      	cmp	r6, r3
 8004d06:	460c      	mov	r4, r1
 8004d08:	4690      	mov	r8, r2
 8004d0a:	4699      	mov	r9, r3
 8004d0c:	d837      	bhi.n	8004d7e <__ssputs_r+0x82>
 8004d0e:	898a      	ldrh	r2, [r1, #12]
 8004d10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d14:	d031      	beq.n	8004d7a <__ssputs_r+0x7e>
 8004d16:	2302      	movs	r3, #2
 8004d18:	6825      	ldr	r5, [r4, #0]
 8004d1a:	6909      	ldr	r1, [r1, #16]
 8004d1c:	1a6f      	subs	r7, r5, r1
 8004d1e:	6965      	ldr	r5, [r4, #20]
 8004d20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d24:	fb95 f5f3 	sdiv	r5, r5, r3
 8004d28:	f109 0301 	add.w	r3, r9, #1
 8004d2c:	443b      	add	r3, r7
 8004d2e:	429d      	cmp	r5, r3
 8004d30:	bf38      	it	cc
 8004d32:	461d      	movcc	r5, r3
 8004d34:	0553      	lsls	r3, r2, #21
 8004d36:	d530      	bpl.n	8004d9a <__ssputs_r+0x9e>
 8004d38:	4629      	mov	r1, r5
 8004d3a:	f000 fb37 	bl	80053ac <_malloc_r>
 8004d3e:	4606      	mov	r6, r0
 8004d40:	b950      	cbnz	r0, 8004d58 <__ssputs_r+0x5c>
 8004d42:	230c      	movs	r3, #12
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	f8ca 3000 	str.w	r3, [sl]
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d52:	81a3      	strh	r3, [r4, #12]
 8004d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d58:	463a      	mov	r2, r7
 8004d5a:	6921      	ldr	r1, [r4, #16]
 8004d5c:	f000 fab6 	bl	80052cc <memcpy>
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6a:	81a3      	strh	r3, [r4, #12]
 8004d6c:	6126      	str	r6, [r4, #16]
 8004d6e:	443e      	add	r6, r7
 8004d70:	6026      	str	r6, [r4, #0]
 8004d72:	464e      	mov	r6, r9
 8004d74:	6165      	str	r5, [r4, #20]
 8004d76:	1bed      	subs	r5, r5, r7
 8004d78:	60a5      	str	r5, [r4, #8]
 8004d7a:	454e      	cmp	r6, r9
 8004d7c:	d900      	bls.n	8004d80 <__ssputs_r+0x84>
 8004d7e:	464e      	mov	r6, r9
 8004d80:	4632      	mov	r2, r6
 8004d82:	4641      	mov	r1, r8
 8004d84:	6820      	ldr	r0, [r4, #0]
 8004d86:	f000 faac 	bl	80052e2 <memmove>
 8004d8a:	68a3      	ldr	r3, [r4, #8]
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	1b9b      	subs	r3, r3, r6
 8004d90:	60a3      	str	r3, [r4, #8]
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	441e      	add	r6, r3
 8004d96:	6026      	str	r6, [r4, #0]
 8004d98:	e7dc      	b.n	8004d54 <__ssputs_r+0x58>
 8004d9a:	462a      	mov	r2, r5
 8004d9c:	f000 fb60 	bl	8005460 <_realloc_r>
 8004da0:	4606      	mov	r6, r0
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d1e2      	bne.n	8004d6c <__ssputs_r+0x70>
 8004da6:	6921      	ldr	r1, [r4, #16]
 8004da8:	4650      	mov	r0, sl
 8004daa:	f000 fab3 	bl	8005314 <_free_r>
 8004dae:	e7c8      	b.n	8004d42 <__ssputs_r+0x46>

08004db0 <_svfiprintf_r>:
 8004db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db4:	461d      	mov	r5, r3
 8004db6:	898b      	ldrh	r3, [r1, #12]
 8004db8:	b09d      	sub	sp, #116	; 0x74
 8004dba:	061f      	lsls	r7, r3, #24
 8004dbc:	4680      	mov	r8, r0
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	4616      	mov	r6, r2
 8004dc2:	d50f      	bpl.n	8004de4 <_svfiprintf_r+0x34>
 8004dc4:	690b      	ldr	r3, [r1, #16]
 8004dc6:	b96b      	cbnz	r3, 8004de4 <_svfiprintf_r+0x34>
 8004dc8:	2140      	movs	r1, #64	; 0x40
 8004dca:	f000 faef 	bl	80053ac <_malloc_r>
 8004dce:	6020      	str	r0, [r4, #0]
 8004dd0:	6120      	str	r0, [r4, #16]
 8004dd2:	b928      	cbnz	r0, 8004de0 <_svfiprintf_r+0x30>
 8004dd4:	230c      	movs	r3, #12
 8004dd6:	f8c8 3000 	str.w	r3, [r8]
 8004dda:	f04f 30ff 	mov.w	r0, #4294967295
 8004dde:	e0c8      	b.n	8004f72 <_svfiprintf_r+0x1c2>
 8004de0:	2340      	movs	r3, #64	; 0x40
 8004de2:	6163      	str	r3, [r4, #20]
 8004de4:	2300      	movs	r3, #0
 8004de6:	9309      	str	r3, [sp, #36]	; 0x24
 8004de8:	2320      	movs	r3, #32
 8004dea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dee:	2330      	movs	r3, #48	; 0x30
 8004df0:	f04f 0b01 	mov.w	fp, #1
 8004df4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004df8:	9503      	str	r5, [sp, #12]
 8004dfa:	4637      	mov	r7, r6
 8004dfc:	463d      	mov	r5, r7
 8004dfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004e02:	b10b      	cbz	r3, 8004e08 <_svfiprintf_r+0x58>
 8004e04:	2b25      	cmp	r3, #37	; 0x25
 8004e06:	d13e      	bne.n	8004e86 <_svfiprintf_r+0xd6>
 8004e08:	ebb7 0a06 	subs.w	sl, r7, r6
 8004e0c:	d00b      	beq.n	8004e26 <_svfiprintf_r+0x76>
 8004e0e:	4653      	mov	r3, sl
 8004e10:	4632      	mov	r2, r6
 8004e12:	4621      	mov	r1, r4
 8004e14:	4640      	mov	r0, r8
 8004e16:	f7ff ff71 	bl	8004cfc <__ssputs_r>
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	f000 80a4 	beq.w	8004f68 <_svfiprintf_r+0x1b8>
 8004e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e22:	4453      	add	r3, sl
 8004e24:	9309      	str	r3, [sp, #36]	; 0x24
 8004e26:	783b      	ldrb	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 809d 	beq.w	8004f68 <_svfiprintf_r+0x1b8>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f04f 32ff 	mov.w	r2, #4294967295
 8004e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e38:	9304      	str	r3, [sp, #16]
 8004e3a:	9307      	str	r3, [sp, #28]
 8004e3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e40:	931a      	str	r3, [sp, #104]	; 0x68
 8004e42:	462f      	mov	r7, r5
 8004e44:	2205      	movs	r2, #5
 8004e46:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004e4a:	4850      	ldr	r0, [pc, #320]	; (8004f8c <_svfiprintf_r+0x1dc>)
 8004e4c:	f000 fa30 	bl	80052b0 <memchr>
 8004e50:	9b04      	ldr	r3, [sp, #16]
 8004e52:	b9d0      	cbnz	r0, 8004e8a <_svfiprintf_r+0xda>
 8004e54:	06d9      	lsls	r1, r3, #27
 8004e56:	bf44      	itt	mi
 8004e58:	2220      	movmi	r2, #32
 8004e5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e5e:	071a      	lsls	r2, r3, #28
 8004e60:	bf44      	itt	mi
 8004e62:	222b      	movmi	r2, #43	; 0x2b
 8004e64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e68:	782a      	ldrb	r2, [r5, #0]
 8004e6a:	2a2a      	cmp	r2, #42	; 0x2a
 8004e6c:	d015      	beq.n	8004e9a <_svfiprintf_r+0xea>
 8004e6e:	462f      	mov	r7, r5
 8004e70:	2000      	movs	r0, #0
 8004e72:	250a      	movs	r5, #10
 8004e74:	9a07      	ldr	r2, [sp, #28]
 8004e76:	4639      	mov	r1, r7
 8004e78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e7c:	3b30      	subs	r3, #48	; 0x30
 8004e7e:	2b09      	cmp	r3, #9
 8004e80:	d94d      	bls.n	8004f1e <_svfiprintf_r+0x16e>
 8004e82:	b1b8      	cbz	r0, 8004eb4 <_svfiprintf_r+0x104>
 8004e84:	e00f      	b.n	8004ea6 <_svfiprintf_r+0xf6>
 8004e86:	462f      	mov	r7, r5
 8004e88:	e7b8      	b.n	8004dfc <_svfiprintf_r+0x4c>
 8004e8a:	4a40      	ldr	r2, [pc, #256]	; (8004f8c <_svfiprintf_r+0x1dc>)
 8004e8c:	463d      	mov	r5, r7
 8004e8e:	1a80      	subs	r0, r0, r2
 8004e90:	fa0b f000 	lsl.w	r0, fp, r0
 8004e94:	4318      	orrs	r0, r3
 8004e96:	9004      	str	r0, [sp, #16]
 8004e98:	e7d3      	b.n	8004e42 <_svfiprintf_r+0x92>
 8004e9a:	9a03      	ldr	r2, [sp, #12]
 8004e9c:	1d11      	adds	r1, r2, #4
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	9103      	str	r1, [sp, #12]
 8004ea2:	2a00      	cmp	r2, #0
 8004ea4:	db01      	blt.n	8004eaa <_svfiprintf_r+0xfa>
 8004ea6:	9207      	str	r2, [sp, #28]
 8004ea8:	e004      	b.n	8004eb4 <_svfiprintf_r+0x104>
 8004eaa:	4252      	negs	r2, r2
 8004eac:	f043 0302 	orr.w	r3, r3, #2
 8004eb0:	9207      	str	r2, [sp, #28]
 8004eb2:	9304      	str	r3, [sp, #16]
 8004eb4:	783b      	ldrb	r3, [r7, #0]
 8004eb6:	2b2e      	cmp	r3, #46	; 0x2e
 8004eb8:	d10c      	bne.n	8004ed4 <_svfiprintf_r+0x124>
 8004eba:	787b      	ldrb	r3, [r7, #1]
 8004ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8004ebe:	d133      	bne.n	8004f28 <_svfiprintf_r+0x178>
 8004ec0:	9b03      	ldr	r3, [sp, #12]
 8004ec2:	3702      	adds	r7, #2
 8004ec4:	1d1a      	adds	r2, r3, #4
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	9203      	str	r2, [sp, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bfb8      	it	lt
 8004ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ed2:	9305      	str	r3, [sp, #20]
 8004ed4:	4d2e      	ldr	r5, [pc, #184]	; (8004f90 <_svfiprintf_r+0x1e0>)
 8004ed6:	2203      	movs	r2, #3
 8004ed8:	7839      	ldrb	r1, [r7, #0]
 8004eda:	4628      	mov	r0, r5
 8004edc:	f000 f9e8 	bl	80052b0 <memchr>
 8004ee0:	b138      	cbz	r0, 8004ef2 <_svfiprintf_r+0x142>
 8004ee2:	2340      	movs	r3, #64	; 0x40
 8004ee4:	1b40      	subs	r0, r0, r5
 8004ee6:	fa03 f000 	lsl.w	r0, r3, r0
 8004eea:	9b04      	ldr	r3, [sp, #16]
 8004eec:	3701      	adds	r7, #1
 8004eee:	4303      	orrs	r3, r0
 8004ef0:	9304      	str	r3, [sp, #16]
 8004ef2:	7839      	ldrb	r1, [r7, #0]
 8004ef4:	2206      	movs	r2, #6
 8004ef6:	4827      	ldr	r0, [pc, #156]	; (8004f94 <_svfiprintf_r+0x1e4>)
 8004ef8:	1c7e      	adds	r6, r7, #1
 8004efa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004efe:	f000 f9d7 	bl	80052b0 <memchr>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d038      	beq.n	8004f78 <_svfiprintf_r+0x1c8>
 8004f06:	4b24      	ldr	r3, [pc, #144]	; (8004f98 <_svfiprintf_r+0x1e8>)
 8004f08:	bb13      	cbnz	r3, 8004f50 <_svfiprintf_r+0x1a0>
 8004f0a:	9b03      	ldr	r3, [sp, #12]
 8004f0c:	3307      	adds	r3, #7
 8004f0e:	f023 0307 	bic.w	r3, r3, #7
 8004f12:	3308      	adds	r3, #8
 8004f14:	9303      	str	r3, [sp, #12]
 8004f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f18:	444b      	add	r3, r9
 8004f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8004f1c:	e76d      	b.n	8004dfa <_svfiprintf_r+0x4a>
 8004f1e:	fb05 3202 	mla	r2, r5, r2, r3
 8004f22:	2001      	movs	r0, #1
 8004f24:	460f      	mov	r7, r1
 8004f26:	e7a6      	b.n	8004e76 <_svfiprintf_r+0xc6>
 8004f28:	2300      	movs	r3, #0
 8004f2a:	250a      	movs	r5, #10
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	3701      	adds	r7, #1
 8004f30:	9305      	str	r3, [sp, #20]
 8004f32:	4638      	mov	r0, r7
 8004f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f38:	3a30      	subs	r2, #48	; 0x30
 8004f3a:	2a09      	cmp	r2, #9
 8004f3c:	d903      	bls.n	8004f46 <_svfiprintf_r+0x196>
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d0c8      	beq.n	8004ed4 <_svfiprintf_r+0x124>
 8004f42:	9105      	str	r1, [sp, #20]
 8004f44:	e7c6      	b.n	8004ed4 <_svfiprintf_r+0x124>
 8004f46:	fb05 2101 	mla	r1, r5, r1, r2
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	4607      	mov	r7, r0
 8004f4e:	e7f0      	b.n	8004f32 <_svfiprintf_r+0x182>
 8004f50:	ab03      	add	r3, sp, #12
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	4622      	mov	r2, r4
 8004f56:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <_svfiprintf_r+0x1ec>)
 8004f58:	a904      	add	r1, sp, #16
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f3af 8000 	nop.w
 8004f60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004f64:	4681      	mov	r9, r0
 8004f66:	d1d6      	bne.n	8004f16 <_svfiprintf_r+0x166>
 8004f68:	89a3      	ldrh	r3, [r4, #12]
 8004f6a:	065b      	lsls	r3, r3, #25
 8004f6c:	f53f af35 	bmi.w	8004dda <_svfiprintf_r+0x2a>
 8004f70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f72:	b01d      	add	sp, #116	; 0x74
 8004f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f78:	ab03      	add	r3, sp, #12
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <_svfiprintf_r+0x1ec>)
 8004f80:	a904      	add	r1, sp, #16
 8004f82:	4640      	mov	r0, r8
 8004f84:	f000 f882 	bl	800508c <_printf_i>
 8004f88:	e7ea      	b.n	8004f60 <_svfiprintf_r+0x1b0>
 8004f8a:	bf00      	nop
 8004f8c:	0800563c 	.word	0x0800563c
 8004f90:	08005642 	.word	0x08005642
 8004f94:	08005646 	.word	0x08005646
 8004f98:	00000000 	.word	0x00000000
 8004f9c:	08004cfd 	.word	0x08004cfd

08004fa0 <_printf_common>:
 8004fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa4:	4691      	mov	r9, r2
 8004fa6:	461f      	mov	r7, r3
 8004fa8:	688a      	ldr	r2, [r1, #8]
 8004faa:	690b      	ldr	r3, [r1, #16]
 8004fac:	4606      	mov	r6, r0
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	bfb8      	it	lt
 8004fb2:	4613      	movlt	r3, r2
 8004fb4:	f8c9 3000 	str.w	r3, [r9]
 8004fb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fc2:	b112      	cbz	r2, 8004fca <_printf_common+0x2a>
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	f8c9 3000 	str.w	r3, [r9]
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	0699      	lsls	r1, r3, #26
 8004fce:	bf42      	ittt	mi
 8004fd0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fd4:	3302      	addmi	r3, #2
 8004fd6:	f8c9 3000 	strmi.w	r3, [r9]
 8004fda:	6825      	ldr	r5, [r4, #0]
 8004fdc:	f015 0506 	ands.w	r5, r5, #6
 8004fe0:	d107      	bne.n	8004ff2 <_printf_common+0x52>
 8004fe2:	f104 0a19 	add.w	sl, r4, #25
 8004fe6:	68e3      	ldr	r3, [r4, #12]
 8004fe8:	f8d9 2000 	ldr.w	r2, [r9]
 8004fec:	1a9b      	subs	r3, r3, r2
 8004fee:	42ab      	cmp	r3, r5
 8004ff0:	dc29      	bgt.n	8005046 <_printf_common+0xa6>
 8004ff2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004ff6:	6822      	ldr	r2, [r4, #0]
 8004ff8:	3300      	adds	r3, #0
 8004ffa:	bf18      	it	ne
 8004ffc:	2301      	movne	r3, #1
 8004ffe:	0692      	lsls	r2, r2, #26
 8005000:	d42e      	bmi.n	8005060 <_printf_common+0xc0>
 8005002:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005006:	4639      	mov	r1, r7
 8005008:	4630      	mov	r0, r6
 800500a:	47c0      	blx	r8
 800500c:	3001      	adds	r0, #1
 800500e:	d021      	beq.n	8005054 <_printf_common+0xb4>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	68e5      	ldr	r5, [r4, #12]
 8005014:	f003 0306 	and.w	r3, r3, #6
 8005018:	2b04      	cmp	r3, #4
 800501a:	bf18      	it	ne
 800501c:	2500      	movne	r5, #0
 800501e:	f8d9 2000 	ldr.w	r2, [r9]
 8005022:	f04f 0900 	mov.w	r9, #0
 8005026:	bf08      	it	eq
 8005028:	1aad      	subeq	r5, r5, r2
 800502a:	68a3      	ldr	r3, [r4, #8]
 800502c:	6922      	ldr	r2, [r4, #16]
 800502e:	bf08      	it	eq
 8005030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005034:	4293      	cmp	r3, r2
 8005036:	bfc4      	itt	gt
 8005038:	1a9b      	subgt	r3, r3, r2
 800503a:	18ed      	addgt	r5, r5, r3
 800503c:	341a      	adds	r4, #26
 800503e:	454d      	cmp	r5, r9
 8005040:	d11a      	bne.n	8005078 <_printf_common+0xd8>
 8005042:	2000      	movs	r0, #0
 8005044:	e008      	b.n	8005058 <_printf_common+0xb8>
 8005046:	2301      	movs	r3, #1
 8005048:	4652      	mov	r2, sl
 800504a:	4639      	mov	r1, r7
 800504c:	4630      	mov	r0, r6
 800504e:	47c0      	blx	r8
 8005050:	3001      	adds	r0, #1
 8005052:	d103      	bne.n	800505c <_printf_common+0xbc>
 8005054:	f04f 30ff 	mov.w	r0, #4294967295
 8005058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505c:	3501      	adds	r5, #1
 800505e:	e7c2      	b.n	8004fe6 <_printf_common+0x46>
 8005060:	2030      	movs	r0, #48	; 0x30
 8005062:	18e1      	adds	r1, r4, r3
 8005064:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800506e:	4422      	add	r2, r4
 8005070:	3302      	adds	r3, #2
 8005072:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005076:	e7c4      	b.n	8005002 <_printf_common+0x62>
 8005078:	2301      	movs	r3, #1
 800507a:	4622      	mov	r2, r4
 800507c:	4639      	mov	r1, r7
 800507e:	4630      	mov	r0, r6
 8005080:	47c0      	blx	r8
 8005082:	3001      	adds	r0, #1
 8005084:	d0e6      	beq.n	8005054 <_printf_common+0xb4>
 8005086:	f109 0901 	add.w	r9, r9, #1
 800508a:	e7d8      	b.n	800503e <_printf_common+0x9e>

0800508c <_printf_i>:
 800508c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005090:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005094:	460c      	mov	r4, r1
 8005096:	7e09      	ldrb	r1, [r1, #24]
 8005098:	b085      	sub	sp, #20
 800509a:	296e      	cmp	r1, #110	; 0x6e
 800509c:	4617      	mov	r7, r2
 800509e:	4606      	mov	r6, r0
 80050a0:	4698      	mov	r8, r3
 80050a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050a4:	f000 80b3 	beq.w	800520e <_printf_i+0x182>
 80050a8:	d822      	bhi.n	80050f0 <_printf_i+0x64>
 80050aa:	2963      	cmp	r1, #99	; 0x63
 80050ac:	d036      	beq.n	800511c <_printf_i+0x90>
 80050ae:	d80a      	bhi.n	80050c6 <_printf_i+0x3a>
 80050b0:	2900      	cmp	r1, #0
 80050b2:	f000 80b9 	beq.w	8005228 <_printf_i+0x19c>
 80050b6:	2958      	cmp	r1, #88	; 0x58
 80050b8:	f000 8083 	beq.w	80051c2 <_printf_i+0x136>
 80050bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80050c4:	e032      	b.n	800512c <_printf_i+0xa0>
 80050c6:	2964      	cmp	r1, #100	; 0x64
 80050c8:	d001      	beq.n	80050ce <_printf_i+0x42>
 80050ca:	2969      	cmp	r1, #105	; 0x69
 80050cc:	d1f6      	bne.n	80050bc <_printf_i+0x30>
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	6813      	ldr	r3, [r2, #0]
 80050d2:	0605      	lsls	r5, r0, #24
 80050d4:	f103 0104 	add.w	r1, r3, #4
 80050d8:	d52a      	bpl.n	8005130 <_printf_i+0xa4>
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6011      	str	r1, [r2, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	da03      	bge.n	80050ea <_printf_i+0x5e>
 80050e2:	222d      	movs	r2, #45	; 0x2d
 80050e4:	425b      	negs	r3, r3
 80050e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050ea:	486f      	ldr	r0, [pc, #444]	; (80052a8 <_printf_i+0x21c>)
 80050ec:	220a      	movs	r2, #10
 80050ee:	e039      	b.n	8005164 <_printf_i+0xd8>
 80050f0:	2973      	cmp	r1, #115	; 0x73
 80050f2:	f000 809d 	beq.w	8005230 <_printf_i+0x1a4>
 80050f6:	d808      	bhi.n	800510a <_printf_i+0x7e>
 80050f8:	296f      	cmp	r1, #111	; 0x6f
 80050fa:	d020      	beq.n	800513e <_printf_i+0xb2>
 80050fc:	2970      	cmp	r1, #112	; 0x70
 80050fe:	d1dd      	bne.n	80050bc <_printf_i+0x30>
 8005100:	6823      	ldr	r3, [r4, #0]
 8005102:	f043 0320 	orr.w	r3, r3, #32
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	e003      	b.n	8005112 <_printf_i+0x86>
 800510a:	2975      	cmp	r1, #117	; 0x75
 800510c:	d017      	beq.n	800513e <_printf_i+0xb2>
 800510e:	2978      	cmp	r1, #120	; 0x78
 8005110:	d1d4      	bne.n	80050bc <_printf_i+0x30>
 8005112:	2378      	movs	r3, #120	; 0x78
 8005114:	4865      	ldr	r0, [pc, #404]	; (80052ac <_printf_i+0x220>)
 8005116:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800511a:	e055      	b.n	80051c8 <_printf_i+0x13c>
 800511c:	6813      	ldr	r3, [r2, #0]
 800511e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005122:	1d19      	adds	r1, r3, #4
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6011      	str	r1, [r2, #0]
 8005128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800512c:	2301      	movs	r3, #1
 800512e:	e08c      	b.n	800524a <_printf_i+0x1be>
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005136:	6011      	str	r1, [r2, #0]
 8005138:	bf18      	it	ne
 800513a:	b21b      	sxthne	r3, r3
 800513c:	e7cf      	b.n	80050de <_printf_i+0x52>
 800513e:	6813      	ldr	r3, [r2, #0]
 8005140:	6825      	ldr	r5, [r4, #0]
 8005142:	1d18      	adds	r0, r3, #4
 8005144:	6010      	str	r0, [r2, #0]
 8005146:	0628      	lsls	r0, r5, #24
 8005148:	d501      	bpl.n	800514e <_printf_i+0xc2>
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	e002      	b.n	8005154 <_printf_i+0xc8>
 800514e:	0668      	lsls	r0, r5, #25
 8005150:	d5fb      	bpl.n	800514a <_printf_i+0xbe>
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	296f      	cmp	r1, #111	; 0x6f
 8005156:	bf14      	ite	ne
 8005158:	220a      	movne	r2, #10
 800515a:	2208      	moveq	r2, #8
 800515c:	4852      	ldr	r0, [pc, #328]	; (80052a8 <_printf_i+0x21c>)
 800515e:	2100      	movs	r1, #0
 8005160:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005164:	6865      	ldr	r5, [r4, #4]
 8005166:	2d00      	cmp	r5, #0
 8005168:	60a5      	str	r5, [r4, #8]
 800516a:	f2c0 8095 	blt.w	8005298 <_printf_i+0x20c>
 800516e:	6821      	ldr	r1, [r4, #0]
 8005170:	f021 0104 	bic.w	r1, r1, #4
 8005174:	6021      	str	r1, [r4, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d13d      	bne.n	80051f6 <_printf_i+0x16a>
 800517a:	2d00      	cmp	r5, #0
 800517c:	f040 808e 	bne.w	800529c <_printf_i+0x210>
 8005180:	4665      	mov	r5, ip
 8005182:	2a08      	cmp	r2, #8
 8005184:	d10b      	bne.n	800519e <_printf_i+0x112>
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	07db      	lsls	r3, r3, #31
 800518a:	d508      	bpl.n	800519e <_printf_i+0x112>
 800518c:	6923      	ldr	r3, [r4, #16]
 800518e:	6862      	ldr	r2, [r4, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	bfde      	ittt	le
 8005194:	2330      	movle	r3, #48	; 0x30
 8005196:	f805 3c01 	strble.w	r3, [r5, #-1]
 800519a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800519e:	ebac 0305 	sub.w	r3, ip, r5
 80051a2:	6123      	str	r3, [r4, #16]
 80051a4:	f8cd 8000 	str.w	r8, [sp]
 80051a8:	463b      	mov	r3, r7
 80051aa:	aa03      	add	r2, sp, #12
 80051ac:	4621      	mov	r1, r4
 80051ae:	4630      	mov	r0, r6
 80051b0:	f7ff fef6 	bl	8004fa0 <_printf_common>
 80051b4:	3001      	adds	r0, #1
 80051b6:	d14d      	bne.n	8005254 <_printf_i+0x1c8>
 80051b8:	f04f 30ff 	mov.w	r0, #4294967295
 80051bc:	b005      	add	sp, #20
 80051be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051c2:	4839      	ldr	r0, [pc, #228]	; (80052a8 <_printf_i+0x21c>)
 80051c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80051c8:	6813      	ldr	r3, [r2, #0]
 80051ca:	6821      	ldr	r1, [r4, #0]
 80051cc:	1d1d      	adds	r5, r3, #4
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6015      	str	r5, [r2, #0]
 80051d2:	060a      	lsls	r2, r1, #24
 80051d4:	d50b      	bpl.n	80051ee <_printf_i+0x162>
 80051d6:	07ca      	lsls	r2, r1, #31
 80051d8:	bf44      	itt	mi
 80051da:	f041 0120 	orrmi.w	r1, r1, #32
 80051de:	6021      	strmi	r1, [r4, #0]
 80051e0:	b91b      	cbnz	r3, 80051ea <_printf_i+0x15e>
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	f022 0220 	bic.w	r2, r2, #32
 80051e8:	6022      	str	r2, [r4, #0]
 80051ea:	2210      	movs	r2, #16
 80051ec:	e7b7      	b.n	800515e <_printf_i+0xd2>
 80051ee:	064d      	lsls	r5, r1, #25
 80051f0:	bf48      	it	mi
 80051f2:	b29b      	uxthmi	r3, r3
 80051f4:	e7ef      	b.n	80051d6 <_printf_i+0x14a>
 80051f6:	4665      	mov	r5, ip
 80051f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80051fc:	fb02 3311 	mls	r3, r2, r1, r3
 8005200:	5cc3      	ldrb	r3, [r0, r3]
 8005202:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005206:	460b      	mov	r3, r1
 8005208:	2900      	cmp	r1, #0
 800520a:	d1f5      	bne.n	80051f8 <_printf_i+0x16c>
 800520c:	e7b9      	b.n	8005182 <_printf_i+0xf6>
 800520e:	6813      	ldr	r3, [r2, #0]
 8005210:	6825      	ldr	r5, [r4, #0]
 8005212:	1d18      	adds	r0, r3, #4
 8005214:	6961      	ldr	r1, [r4, #20]
 8005216:	6010      	str	r0, [r2, #0]
 8005218:	0628      	lsls	r0, r5, #24
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	d501      	bpl.n	8005222 <_printf_i+0x196>
 800521e:	6019      	str	r1, [r3, #0]
 8005220:	e002      	b.n	8005228 <_printf_i+0x19c>
 8005222:	066a      	lsls	r2, r5, #25
 8005224:	d5fb      	bpl.n	800521e <_printf_i+0x192>
 8005226:	8019      	strh	r1, [r3, #0]
 8005228:	2300      	movs	r3, #0
 800522a:	4665      	mov	r5, ip
 800522c:	6123      	str	r3, [r4, #16]
 800522e:	e7b9      	b.n	80051a4 <_printf_i+0x118>
 8005230:	6813      	ldr	r3, [r2, #0]
 8005232:	1d19      	adds	r1, r3, #4
 8005234:	6011      	str	r1, [r2, #0]
 8005236:	681d      	ldr	r5, [r3, #0]
 8005238:	6862      	ldr	r2, [r4, #4]
 800523a:	2100      	movs	r1, #0
 800523c:	4628      	mov	r0, r5
 800523e:	f000 f837 	bl	80052b0 <memchr>
 8005242:	b108      	cbz	r0, 8005248 <_printf_i+0x1bc>
 8005244:	1b40      	subs	r0, r0, r5
 8005246:	6060      	str	r0, [r4, #4]
 8005248:	6863      	ldr	r3, [r4, #4]
 800524a:	6123      	str	r3, [r4, #16]
 800524c:	2300      	movs	r3, #0
 800524e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005252:	e7a7      	b.n	80051a4 <_printf_i+0x118>
 8005254:	6923      	ldr	r3, [r4, #16]
 8005256:	462a      	mov	r2, r5
 8005258:	4639      	mov	r1, r7
 800525a:	4630      	mov	r0, r6
 800525c:	47c0      	blx	r8
 800525e:	3001      	adds	r0, #1
 8005260:	d0aa      	beq.n	80051b8 <_printf_i+0x12c>
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	079b      	lsls	r3, r3, #30
 8005266:	d413      	bmi.n	8005290 <_printf_i+0x204>
 8005268:	68e0      	ldr	r0, [r4, #12]
 800526a:	9b03      	ldr	r3, [sp, #12]
 800526c:	4298      	cmp	r0, r3
 800526e:	bfb8      	it	lt
 8005270:	4618      	movlt	r0, r3
 8005272:	e7a3      	b.n	80051bc <_printf_i+0x130>
 8005274:	2301      	movs	r3, #1
 8005276:	464a      	mov	r2, r9
 8005278:	4639      	mov	r1, r7
 800527a:	4630      	mov	r0, r6
 800527c:	47c0      	blx	r8
 800527e:	3001      	adds	r0, #1
 8005280:	d09a      	beq.n	80051b8 <_printf_i+0x12c>
 8005282:	3501      	adds	r5, #1
 8005284:	68e3      	ldr	r3, [r4, #12]
 8005286:	9a03      	ldr	r2, [sp, #12]
 8005288:	1a9b      	subs	r3, r3, r2
 800528a:	42ab      	cmp	r3, r5
 800528c:	dcf2      	bgt.n	8005274 <_printf_i+0x1e8>
 800528e:	e7eb      	b.n	8005268 <_printf_i+0x1dc>
 8005290:	2500      	movs	r5, #0
 8005292:	f104 0919 	add.w	r9, r4, #25
 8005296:	e7f5      	b.n	8005284 <_printf_i+0x1f8>
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1ac      	bne.n	80051f6 <_printf_i+0x16a>
 800529c:	7803      	ldrb	r3, [r0, #0]
 800529e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052a6:	e76c      	b.n	8005182 <_printf_i+0xf6>
 80052a8:	0800564d 	.word	0x0800564d
 80052ac:	0800565e 	.word	0x0800565e

080052b0 <memchr>:
 80052b0:	b510      	push	{r4, lr}
 80052b2:	b2c9      	uxtb	r1, r1
 80052b4:	4402      	add	r2, r0
 80052b6:	4290      	cmp	r0, r2
 80052b8:	4603      	mov	r3, r0
 80052ba:	d101      	bne.n	80052c0 <memchr+0x10>
 80052bc:	2300      	movs	r3, #0
 80052be:	e003      	b.n	80052c8 <memchr+0x18>
 80052c0:	781c      	ldrb	r4, [r3, #0]
 80052c2:	3001      	adds	r0, #1
 80052c4:	428c      	cmp	r4, r1
 80052c6:	d1f6      	bne.n	80052b6 <memchr+0x6>
 80052c8:	4618      	mov	r0, r3
 80052ca:	bd10      	pop	{r4, pc}

080052cc <memcpy>:
 80052cc:	b510      	push	{r4, lr}
 80052ce:	1e43      	subs	r3, r0, #1
 80052d0:	440a      	add	r2, r1
 80052d2:	4291      	cmp	r1, r2
 80052d4:	d100      	bne.n	80052d8 <memcpy+0xc>
 80052d6:	bd10      	pop	{r4, pc}
 80052d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052e0:	e7f7      	b.n	80052d2 <memcpy+0x6>

080052e2 <memmove>:
 80052e2:	4288      	cmp	r0, r1
 80052e4:	b510      	push	{r4, lr}
 80052e6:	eb01 0302 	add.w	r3, r1, r2
 80052ea:	d807      	bhi.n	80052fc <memmove+0x1a>
 80052ec:	1e42      	subs	r2, r0, #1
 80052ee:	4299      	cmp	r1, r3
 80052f0:	d00a      	beq.n	8005308 <memmove+0x26>
 80052f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052f6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80052fa:	e7f8      	b.n	80052ee <memmove+0xc>
 80052fc:	4283      	cmp	r3, r0
 80052fe:	d9f5      	bls.n	80052ec <memmove+0xa>
 8005300:	1881      	adds	r1, r0, r2
 8005302:	1ad2      	subs	r2, r2, r3
 8005304:	42d3      	cmn	r3, r2
 8005306:	d100      	bne.n	800530a <memmove+0x28>
 8005308:	bd10      	pop	{r4, pc}
 800530a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800530e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005312:	e7f7      	b.n	8005304 <memmove+0x22>

08005314 <_free_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4605      	mov	r5, r0
 8005318:	2900      	cmp	r1, #0
 800531a:	d043      	beq.n	80053a4 <_free_r+0x90>
 800531c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005320:	1f0c      	subs	r4, r1, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	bfb8      	it	lt
 8005326:	18e4      	addlt	r4, r4, r3
 8005328:	f000 f8d0 	bl	80054cc <__malloc_lock>
 800532c:	4a1e      	ldr	r2, [pc, #120]	; (80053a8 <_free_r+0x94>)
 800532e:	6813      	ldr	r3, [r2, #0]
 8005330:	4610      	mov	r0, r2
 8005332:	b933      	cbnz	r3, 8005342 <_free_r+0x2e>
 8005334:	6063      	str	r3, [r4, #4]
 8005336:	6014      	str	r4, [r2, #0]
 8005338:	4628      	mov	r0, r5
 800533a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800533e:	f000 b8c6 	b.w	80054ce <__malloc_unlock>
 8005342:	42a3      	cmp	r3, r4
 8005344:	d90b      	bls.n	800535e <_free_r+0x4a>
 8005346:	6821      	ldr	r1, [r4, #0]
 8005348:	1862      	adds	r2, r4, r1
 800534a:	4293      	cmp	r3, r2
 800534c:	bf01      	itttt	eq
 800534e:	681a      	ldreq	r2, [r3, #0]
 8005350:	685b      	ldreq	r3, [r3, #4]
 8005352:	1852      	addeq	r2, r2, r1
 8005354:	6022      	streq	r2, [r4, #0]
 8005356:	6063      	str	r3, [r4, #4]
 8005358:	6004      	str	r4, [r0, #0]
 800535a:	e7ed      	b.n	8005338 <_free_r+0x24>
 800535c:	4613      	mov	r3, r2
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	b10a      	cbz	r2, 8005366 <_free_r+0x52>
 8005362:	42a2      	cmp	r2, r4
 8005364:	d9fa      	bls.n	800535c <_free_r+0x48>
 8005366:	6819      	ldr	r1, [r3, #0]
 8005368:	1858      	adds	r0, r3, r1
 800536a:	42a0      	cmp	r0, r4
 800536c:	d10b      	bne.n	8005386 <_free_r+0x72>
 800536e:	6820      	ldr	r0, [r4, #0]
 8005370:	4401      	add	r1, r0
 8005372:	1858      	adds	r0, r3, r1
 8005374:	4282      	cmp	r2, r0
 8005376:	6019      	str	r1, [r3, #0]
 8005378:	d1de      	bne.n	8005338 <_free_r+0x24>
 800537a:	6810      	ldr	r0, [r2, #0]
 800537c:	6852      	ldr	r2, [r2, #4]
 800537e:	4401      	add	r1, r0
 8005380:	6019      	str	r1, [r3, #0]
 8005382:	605a      	str	r2, [r3, #4]
 8005384:	e7d8      	b.n	8005338 <_free_r+0x24>
 8005386:	d902      	bls.n	800538e <_free_r+0x7a>
 8005388:	230c      	movs	r3, #12
 800538a:	602b      	str	r3, [r5, #0]
 800538c:	e7d4      	b.n	8005338 <_free_r+0x24>
 800538e:	6820      	ldr	r0, [r4, #0]
 8005390:	1821      	adds	r1, r4, r0
 8005392:	428a      	cmp	r2, r1
 8005394:	bf01      	itttt	eq
 8005396:	6811      	ldreq	r1, [r2, #0]
 8005398:	6852      	ldreq	r2, [r2, #4]
 800539a:	1809      	addeq	r1, r1, r0
 800539c:	6021      	streq	r1, [r4, #0]
 800539e:	6062      	str	r2, [r4, #4]
 80053a0:	605c      	str	r4, [r3, #4]
 80053a2:	e7c9      	b.n	8005338 <_free_r+0x24>
 80053a4:	bd38      	pop	{r3, r4, r5, pc}
 80053a6:	bf00      	nop
 80053a8:	200000b0 	.word	0x200000b0

080053ac <_malloc_r>:
 80053ac:	b570      	push	{r4, r5, r6, lr}
 80053ae:	1ccd      	adds	r5, r1, #3
 80053b0:	f025 0503 	bic.w	r5, r5, #3
 80053b4:	3508      	adds	r5, #8
 80053b6:	2d0c      	cmp	r5, #12
 80053b8:	bf38      	it	cc
 80053ba:	250c      	movcc	r5, #12
 80053bc:	2d00      	cmp	r5, #0
 80053be:	4606      	mov	r6, r0
 80053c0:	db01      	blt.n	80053c6 <_malloc_r+0x1a>
 80053c2:	42a9      	cmp	r1, r5
 80053c4:	d903      	bls.n	80053ce <_malloc_r+0x22>
 80053c6:	230c      	movs	r3, #12
 80053c8:	6033      	str	r3, [r6, #0]
 80053ca:	2000      	movs	r0, #0
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
 80053ce:	f000 f87d 	bl	80054cc <__malloc_lock>
 80053d2:	4a21      	ldr	r2, [pc, #132]	; (8005458 <_malloc_r+0xac>)
 80053d4:	6814      	ldr	r4, [r2, #0]
 80053d6:	4621      	mov	r1, r4
 80053d8:	b991      	cbnz	r1, 8005400 <_malloc_r+0x54>
 80053da:	4c20      	ldr	r4, [pc, #128]	; (800545c <_malloc_r+0xb0>)
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	b91b      	cbnz	r3, 80053e8 <_malloc_r+0x3c>
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 f863 	bl	80054ac <_sbrk_r>
 80053e6:	6020      	str	r0, [r4, #0]
 80053e8:	4629      	mov	r1, r5
 80053ea:	4630      	mov	r0, r6
 80053ec:	f000 f85e 	bl	80054ac <_sbrk_r>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d124      	bne.n	800543e <_malloc_r+0x92>
 80053f4:	230c      	movs	r3, #12
 80053f6:	4630      	mov	r0, r6
 80053f8:	6033      	str	r3, [r6, #0]
 80053fa:	f000 f868 	bl	80054ce <__malloc_unlock>
 80053fe:	e7e4      	b.n	80053ca <_malloc_r+0x1e>
 8005400:	680b      	ldr	r3, [r1, #0]
 8005402:	1b5b      	subs	r3, r3, r5
 8005404:	d418      	bmi.n	8005438 <_malloc_r+0x8c>
 8005406:	2b0b      	cmp	r3, #11
 8005408:	d90f      	bls.n	800542a <_malloc_r+0x7e>
 800540a:	600b      	str	r3, [r1, #0]
 800540c:	18cc      	adds	r4, r1, r3
 800540e:	50cd      	str	r5, [r1, r3]
 8005410:	4630      	mov	r0, r6
 8005412:	f000 f85c 	bl	80054ce <__malloc_unlock>
 8005416:	f104 000b 	add.w	r0, r4, #11
 800541a:	1d23      	adds	r3, r4, #4
 800541c:	f020 0007 	bic.w	r0, r0, #7
 8005420:	1ac3      	subs	r3, r0, r3
 8005422:	d0d3      	beq.n	80053cc <_malloc_r+0x20>
 8005424:	425a      	negs	r2, r3
 8005426:	50e2      	str	r2, [r4, r3]
 8005428:	e7d0      	b.n	80053cc <_malloc_r+0x20>
 800542a:	684b      	ldr	r3, [r1, #4]
 800542c:	428c      	cmp	r4, r1
 800542e:	bf16      	itet	ne
 8005430:	6063      	strne	r3, [r4, #4]
 8005432:	6013      	streq	r3, [r2, #0]
 8005434:	460c      	movne	r4, r1
 8005436:	e7eb      	b.n	8005410 <_malloc_r+0x64>
 8005438:	460c      	mov	r4, r1
 800543a:	6849      	ldr	r1, [r1, #4]
 800543c:	e7cc      	b.n	80053d8 <_malloc_r+0x2c>
 800543e:	1cc4      	adds	r4, r0, #3
 8005440:	f024 0403 	bic.w	r4, r4, #3
 8005444:	42a0      	cmp	r0, r4
 8005446:	d005      	beq.n	8005454 <_malloc_r+0xa8>
 8005448:	1a21      	subs	r1, r4, r0
 800544a:	4630      	mov	r0, r6
 800544c:	f000 f82e 	bl	80054ac <_sbrk_r>
 8005450:	3001      	adds	r0, #1
 8005452:	d0cf      	beq.n	80053f4 <_malloc_r+0x48>
 8005454:	6025      	str	r5, [r4, #0]
 8005456:	e7db      	b.n	8005410 <_malloc_r+0x64>
 8005458:	200000b0 	.word	0x200000b0
 800545c:	200000b4 	.word	0x200000b4

08005460 <_realloc_r>:
 8005460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005462:	4607      	mov	r7, r0
 8005464:	4614      	mov	r4, r2
 8005466:	460e      	mov	r6, r1
 8005468:	b921      	cbnz	r1, 8005474 <_realloc_r+0x14>
 800546a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800546e:	4611      	mov	r1, r2
 8005470:	f7ff bf9c 	b.w	80053ac <_malloc_r>
 8005474:	b922      	cbnz	r2, 8005480 <_realloc_r+0x20>
 8005476:	f7ff ff4d 	bl	8005314 <_free_r>
 800547a:	4625      	mov	r5, r4
 800547c:	4628      	mov	r0, r5
 800547e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005480:	f000 f826 	bl	80054d0 <_malloc_usable_size_r>
 8005484:	42a0      	cmp	r0, r4
 8005486:	d20f      	bcs.n	80054a8 <_realloc_r+0x48>
 8005488:	4621      	mov	r1, r4
 800548a:	4638      	mov	r0, r7
 800548c:	f7ff ff8e 	bl	80053ac <_malloc_r>
 8005490:	4605      	mov	r5, r0
 8005492:	2800      	cmp	r0, #0
 8005494:	d0f2      	beq.n	800547c <_realloc_r+0x1c>
 8005496:	4631      	mov	r1, r6
 8005498:	4622      	mov	r2, r4
 800549a:	f7ff ff17 	bl	80052cc <memcpy>
 800549e:	4631      	mov	r1, r6
 80054a0:	4638      	mov	r0, r7
 80054a2:	f7ff ff37 	bl	8005314 <_free_r>
 80054a6:	e7e9      	b.n	800547c <_realloc_r+0x1c>
 80054a8:	4635      	mov	r5, r6
 80054aa:	e7e7      	b.n	800547c <_realloc_r+0x1c>

080054ac <_sbrk_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	2300      	movs	r3, #0
 80054b0:	4c05      	ldr	r4, [pc, #20]	; (80054c8 <_sbrk_r+0x1c>)
 80054b2:	4605      	mov	r5, r0
 80054b4:	4608      	mov	r0, r1
 80054b6:	6023      	str	r3, [r4, #0]
 80054b8:	f7fc fc46 	bl	8001d48 <_sbrk>
 80054bc:	1c43      	adds	r3, r0, #1
 80054be:	d102      	bne.n	80054c6 <_sbrk_r+0x1a>
 80054c0:	6823      	ldr	r3, [r4, #0]
 80054c2:	b103      	cbz	r3, 80054c6 <_sbrk_r+0x1a>
 80054c4:	602b      	str	r3, [r5, #0]
 80054c6:	bd38      	pop	{r3, r4, r5, pc}
 80054c8:	20000238 	.word	0x20000238

080054cc <__malloc_lock>:
 80054cc:	4770      	bx	lr

080054ce <__malloc_unlock>:
 80054ce:	4770      	bx	lr

080054d0 <_malloc_usable_size_r>:
 80054d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d4:	1f18      	subs	r0, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bfbc      	itt	lt
 80054da:	580b      	ldrlt	r3, [r1, r0]
 80054dc:	18c0      	addlt	r0, r0, r3
 80054de:	4770      	bx	lr

080054e0 <_init>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	bf00      	nop
 80054e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054e6:	bc08      	pop	{r3}
 80054e8:	469e      	mov	lr, r3
 80054ea:	4770      	bx	lr

080054ec <_fini>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	bf00      	nop
 80054f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054f2:	bc08      	pop	{r3}
 80054f4:	469e      	mov	lr, r3
 80054f6:	4770      	bx	lr
